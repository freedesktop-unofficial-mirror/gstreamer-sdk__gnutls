This is gnutls.info, produced by makeinfo version 4.13.90 from
gnutls.texi.

This manual is last updated 14 February 2012 for version 3.0.14 of
GnuTLS.

Copyright (C) 2001-2012 Free Software Foundation, Inc.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION System Administration
START-INFO-DIR-ENTRY
* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
END-INFO-DIR-ENTRY


File: gnutls.info,  Node: OCSP API,  Next: OpenPGP API,  Prev: X509 certificate API,  Up: API reference

D.4 OCSP API
============

The following functions are for OCSP certificate status checking.  Their
prototypes lie in 'gnutls/ocsp.h'.

gnutls_ocsp_req_add_cert
------------------------

 -- Function: int gnutls_ocsp_req_add_cert (gnutls_ocsp_req_t REQ,
          gnutls_digest_algorithm_t DIGEST, gnutls_x509_crt_t ISSUER,
          gnutls_x509_crt_t CERT)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value

     ISSUER: issuer of 'subject' certificate

     CERT: certificate to request status for

     This function will add another request to the OCSP request for a
     particular certificate.  The issuer name hash, issuer key hash, and
     serial number fields is populated as follows.  The issuer name and
     the serial number is taken from 'cert' .  The issuer key is taken
     from 'issuer' .  The hashed values will be hashed using the
     'digest' algorithm, normally 'GNUTLS_DIG_SHA1' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_add_cert_id
---------------------------

 -- Function: int gnutls_ocsp_req_add_cert_id (gnutls_ocsp_req_t REQ,
          gnutls_digest_algorithm_t DIGEST, const gnutls_datum_t *
          ISSUER_NAME_HASH, const gnutls_datum_t * ISSUER_KEY_HASH,
          const gnutls_datum_t * SERIAL_NUMBER)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     DIGEST: hash algorithm, a 'gnutls_digest_algorithm_t' value

     ISSUER_NAME_HASH: hash of issuer's DN

     ISSUER_KEY_HASH: hash of issuer's public key

     SERIAL_NUMBER: serial number of certificate to check

     This function will add another request to the OCSP request for a
     particular certificate having the issuer name hash of
     'issuer_name_hash' and issuer key hash of 'issuer_key_hash' (both
     hashed using 'digest' ) and serial number 'serial_number' .

     The information needed corresponds to the CertID structure:

     <informalexample><programlisting> CertID ::= SEQUENCE {
     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
     public key serialNumber CertificateSerialNumber }
     </programlisting></informalexample>

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_deinit
----------------------

 -- Function: void gnutls_ocsp_req_deinit (gnutls_ocsp_req_t REQ)
     REQ: The structure to be deinitialized

     This function will deinitialize a OCSP request structure.

gnutls_ocsp_req_export
----------------------

 -- Function: int gnutls_ocsp_req_export (gnutls_ocsp_req_t REQ,
          gnutls_datum_t * DATA)
     REQ: Holds the OCSP request

     DATA: newly allocate buffer holding DER encoded OCSP request

     This function will export the OCSP request to DER format.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_ocsp_req_get_cert_id
---------------------------

 -- Function: int gnutls_ocsp_req_get_cert_id (gnutls_ocsp_req_t REQ,
          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
     algorithm

     ISSUER_NAME_HASH: output buffer with hash of issuer's DN

     ISSUER_KEY_HASH: output buffer with hash of issuer's public key

     SERIAL_NUMBER: output buffer with serial number of certificate to
     check

     This function will return the certificate information of the 'indx'
     'ed request in the OCSP request.  The information returned
     corresponds to the CertID structure:

     <informalexample><programlisting> CertID ::= SEQUENCE {
     hashAlgorithm AlgorithmIdentifier, issuerNameHash OCTET STRING, -
     Hash of Issuer's DN issuerKeyHash OCTET STRING, - Hash of Issuers
     public key serialNumber CertificateSerialNumber }
     </programlisting></informalexample>

     Each of the pointers to output variables may be NULL to indicate
     that the caller is not interested in that value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
     will be returned.

gnutls_ocsp_req_get_extension
-----------------------------

 -- Function: int gnutls_ocsp_req_get_extension (gnutls_ocsp_req_t REQ,
          unsigned INDX, gnutls_datum_t * OID, unsigned int * CRITICAL,
          gnutls_datum_t * DATA)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     OID: will hold newly allocated buffer with OID of extension, may be
     NULL

     CRITICAL: output variable with critical flag, may be NULL.

     DATA: will hold newly allocated buffer with extension data, may be
     NULL

     This function will return all information about the requested
     extension in the OCSP request.  The information returned is the
     OID, the critical flag, and the data itself.  The extension OID
     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
     may be NULL which means that the caller is not interested in
     getting that information back.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'oid' ->data and 'data' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last extension available
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_ocsp_req_get_nonce
-------------------------

 -- Function: int gnutls_ocsp_req_get_nonce (gnutls_ocsp_req_t REQ,
          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     CRITICAL: whether nonce extension is marked critical, or NULL

     NONCE: will hold newly allocated buffer with nonce data

     This function will return the OCSP request nonce extension data.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'nonce' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_get_version
---------------------------

 -- Function: int gnutls_ocsp_req_get_version (gnutls_ocsp_req_t REQ)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     This function will return the version of the OCSP request.
     Typically this is always 1 indicating version 1.

     *Returns:* version of OCSP request, or a negative error code on
     error.

gnutls_ocsp_req_import
----------------------

 -- Function: int gnutls_ocsp_req_import (gnutls_ocsp_req_t REQ, const
          gnutls_datum_t * DATA)
     REQ: The structure to store the parsed request.

     DATA: DER encoded OCSP request.

     This function will convert the given DER encoded OCSP request to
     the native 'gnutls_ocsp_req_t' format.  The output will be stored
     in 'req' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_init
--------------------

 -- Function: int gnutls_ocsp_req_init (gnutls_ocsp_req_t * REQ)
     REQ: The structure to be initialized

     This function will initialize an OCSP request structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_print
---------------------

 -- Function: int gnutls_ocsp_req_print (gnutls_ocsp_req_t REQ,
          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
     REQ: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     This function will pretty print a OCSP request, suitable for
     display to a human.

     If the format is 'GNUTLS_PRINT_FULL' then all fields of the request
     will be output, on multiple lines.

     The output 'out' ->data needs to be deallocate using
     'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_req_randomize_nonce
-------------------------------

 -- Function: int gnutls_ocsp_req_randomize_nonce (gnutls_ocsp_req_t
          REQ)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     This function will add or update an nonce extension to the OCSP
     request with a newly generated random value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_set_extension
-----------------------------

 -- Function: int gnutls_ocsp_req_set_extension (gnutls_ocsp_req_t REQ,
          const char * OID, unsigned int CRITICAL, const gnutls_datum_t
          * DATA)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     OID: buffer with OID of extension as a string.

     CRITICAL: critical flag, normally false.

     DATA: the extension data

     This function will add an extension to the OCSP request.  Calling
     this function multiple times for the same OID will overwrite values
     from earlier calls.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_req_set_nonce
-------------------------

 -- Function: int gnutls_ocsp_req_set_nonce (gnutls_ocsp_req_t REQ,
          unsigned int CRITICAL, const gnutls_datum_t * NONCE)
     REQ: should contain a 'gnutls_ocsp_req_t' structure

     CRITICAL: critical flag, normally false.

     NONCE: the nonce data

     This function will add an nonce extension to the OCSP request.
     Calling this function multiple times will overwrite values from
     earlier calls.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_deinit
-----------------------

 -- Function: void gnutls_ocsp_resp_deinit (gnutls_ocsp_resp_t RESP)
     RESP: The structure to be deinitialized

     This function will deinitialize a OCSP response structure.

gnutls_ocsp_resp_export
-----------------------

 -- Function: int gnutls_ocsp_resp_export (gnutls_ocsp_resp_t RESP,
          gnutls_datum_t * DATA)
     RESP: Holds the OCSP response

     DATA: newly allocate buffer holding DER encoded OCSP response

     This function will export the OCSP response to DER format.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_ocsp_resp_get_certs
--------------------------

 -- Function: int gnutls_ocsp_resp_get_certs (gnutls_ocsp_resp_t RESP,
          gnutls_x509_crt_t ** CERTS, size_t * NCERTS)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     CERTS: newly allocated array with 'gnutls_x509_crt_t' certificates

     NCERTS: output variable with number of allocated certs.

     This function will extract the X.509 certificates found in the
     Basic OCSP Response.  The 'certs' output variable will hold a newly
     allocated zero-terminated array with X.509 certificates.

     Every certificate in the array needs to be de-allocated with
     'gnutls_x509_crt_deinit()' and the array itself must be freed using
     'gnutls_free()' .

     Both the 'certs' and 'ncerts' variables may be NULL. Then the
     function will work as normal but will not return the NULL:d
     information.  This can be used to get the number of certificates
     only, or to just get the certificate array without its size.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_extension
------------------------------

 -- Function: int gnutls_ocsp_resp_get_extension (gnutls_ocsp_resp_t
          RESP, unsigned INDX, gnutls_datum_t * OID, unsigned int *
          CRITICAL, gnutls_datum_t * DATA)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     OID: will hold newly allocated buffer with OID of extension, may be
     NULL

     CRITICAL: output variable with critical flag, may be NULL.

     DATA: will hold newly allocated buffer with extension data, may be
     NULL

     This function will return all information about the requested
     extension in the OCSP response.  The information returned is the
     OID, the critical flag, and the data itself.  The extension OID
     will be stored as a string.  Any of 'oid' , 'critical' , and 'data'
     may be NULL which means that the caller is not interested in
     getting that information back.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'oid' ->data and 'data' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last extension available
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

gnutls_ocsp_resp_get_nonce
--------------------------

 -- Function: int gnutls_ocsp_resp_get_nonce (gnutls_ocsp_resp_t RESP,
          unsigned int * CRITICAL, gnutls_datum_t * NONCE)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     CRITICAL: whether nonce extension is marked critical

     NONCE: will hold newly allocated buffer with nonce data

     This function will return the Basic OCSP Response nonce extension
     data.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'nonce' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_get_produced
-----------------------------

 -- Function: time_t gnutls_ocsp_resp_get_produced (gnutls_ocsp_resp_t
          RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     This function will return the time when the OCSP response was
     signed.

     *Returns:* signing time, or (time_t)-1 on error.

gnutls_ocsp_resp_get_responder
------------------------------

 -- Function: int gnutls_ocsp_resp_get_responder (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * DN)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     DN: newly allocated buffer with name

     This function will extract the name of the Basic OCSP Response in
     the provided buffer.  The name will be in the form
     "C=xxxx,O=yyyy,CN=zzzz" as described in RFC2253.  The output string
     will be ASCII or UTF-8 encoded, depending on the certificate data.

     The caller needs to deallocate memory by calling 'gnutls_free()' on
     'dn' ->data.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_ocsp_resp_get_response
-----------------------------

 -- Function: int gnutls_ocsp_resp_get_response (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * RESPONSE_TYPE_OID, gnutls_datum_t *
          RESPONSE)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     RESPONSE_TYPE_OID: newly allocated output buffer with response type
     OID

     RESPONSE: newly allocated output buffer with DER encoded response

     This function will extract the response type OID in and the
     response data from an OCSP response.  Normally the
     'response_type_oid' is always "1.3.6.1.5.5.7.48.1.1" which means
     the 'response' should be decoded as a Basic OCSP Response, but
     technically other response types could be used.

     This function is typically only useful when you want to extract the
     response type OID of an response for diagnostic purposes.
     Otherwise 'gnutls_ocsp_resp_import()' will decode the basic OCSP
     response part and the caller need not worry about that aspect.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_signature
------------------------------

 -- Function: int gnutls_ocsp_resp_get_signature (gnutls_ocsp_resp_t
          RESP, gnutls_datum_t * SIG)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     SIG: newly allocated output buffer with signature data

     This function will extract the signature field of a OCSP response.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_get_signature_algorithm
----------------------------------------

 -- Function: int gnutls_ocsp_resp_get_signature_algorithm
          (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     This function will return a value of the 'gnutls_sign_algorithm_t'
     enumeration that is the signature algorithm that has been used to
     sign the OCSP response.

     *Returns:* a 'gnutls_sign_algorithm_t' value, or a negative error
     code on error.

gnutls_ocsp_resp_get_single
---------------------------

 -- Function: int gnutls_ocsp_resp_get_single (gnutls_ocsp_resp_t RESP,
          unsigned INDX, gnutls_digest_algorithm_t * DIGEST,
          gnutls_datum_t * ISSUER_NAME_HASH, gnutls_datum_t *
          ISSUER_KEY_HASH, gnutls_datum_t * SERIAL_NUMBER, unsigned int
          * CERT_STATUS, time_t * THIS_UPDATE, time_t * NEXT_UPDATE,
          time_t * REVOCATION_TIME, unsigned int * REVOCATION_REASON)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     INDX: Specifies which extension OID to get.  Use (0) to get the
     first one.

     DIGEST: output variable with 'gnutls_digest_algorithm_t' hash
     algorithm

     ISSUER_NAME_HASH: output buffer with hash of issuer's DN

     ISSUER_KEY_HASH: output buffer with hash of issuer's public key

     SERIAL_NUMBER: output buffer with serial number of certificate to
     check

     CERT_STATUS: a certificate status, a 'gnutls_ocsp_cert_status_t'
     enum.

     THIS_UPDATE: time at which the status is known to be correct.

     NEXT_UPDATE: when newer information will be available, or
     (time_t)-1 if unspecified

     REVOCATION_TIME: when 'cert_status' is 'GNUTLS_OCSP_CERT_REVOKED' ,
     holds time of revocation.

     REVOCATION_REASON: revocation reason, a 'gnutls_x509_crl_reason_t'
     enum.

     This function will return the certificate information of the 'indx'
     'ed response in the Basic OCSP Response 'resp' .  The information
     returned corresponds to the SingleResponse structure except the
     final singleExtensions, reproduced here for illustration:

     <informalexample><programlisting> SingleResponse ::= SEQUENCE {
     certID CertID, certStatus CertStatus, thisUpdate GeneralizedTime,
     nextUpdate [0] EXPLICIT GeneralizedTime OPTIONAL, singleExtensions
     [1] EXPLICIT Extensions OPTIONAL }

     CertID ::= SEQUENCE { hashAlgorithm AlgorithmIdentifier,
     issuerNameHash OCTET STRING, - Hash of Issuer's DN issuerKeyHash
     OCTET STRING, - Hash of Issuers public key serialNumber
     CertificateSerialNumber }

     CertStatus ::= CHOICE { good [0] IMPLICIT NULL, revoked [1]
     IMPLICIT RevokedInfo, unknown [2] IMPLICIT UnknownInfo }

     RevokedInfo ::= SEQUENCE { revocationTime GeneralizedTime,
     revocationReason [0] EXPLICIT CRLReason OPTIONAL }
     </programlisting></informalexample>

     Each of the pointers to output variables may be NULL to indicate
     that the caller is not interested in that value.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.  If you have reached
     the last CertID available 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE'
     will be returned.

gnutls_ocsp_resp_get_status
---------------------------

 -- Function: int gnutls_ocsp_resp_get_status (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     This function will return the status of a OCSP response, an
     'gnutls_ocsp_resp_status_t' enumeration.

     *Returns:* status of OCSP request as a 'gnutls_ocsp_resp_status_t'
     , or a negative error code on error.

gnutls_ocsp_resp_get_version
----------------------------

 -- Function: int gnutls_ocsp_resp_get_version (gnutls_ocsp_resp_t RESP)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     This function will return the version of the Basic OCSP Response.
     Typically this is always 1 indicating version 1.

     *Returns:* version of Basic OCSP response, or a negative error code
     on error.

gnutls_ocsp_resp_import
-----------------------

 -- Function: int gnutls_ocsp_resp_import (gnutls_ocsp_resp_t RESP,
          const gnutls_datum_t * DATA)
     RESP: The structure to store the parsed response.

     DATA: DER encoded OCSP response.

     This function will convert the given DER encoded OCSP response to
     the native 'gnutls_ocsp_resp_t' format.  It also decodes the Basic
     OCSP Response part, if any.  The output will be stored in 'resp' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_init
---------------------

 -- Function: int gnutls_ocsp_resp_init (gnutls_ocsp_resp_t * RESP)
     RESP: The structure to be initialized

     This function will initialize an OCSP response structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_print
----------------------

 -- Function: int gnutls_ocsp_resp_print (gnutls_ocsp_resp_t RESP,
          gnutls_ocsp_print_formats_t FORMAT, gnutls_datum_t * OUT)
     RESP: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     This function will pretty print a OCSP response, suitable for
     display to a human.

     If the format is 'GNUTLS_PRINT_FULL' then all fields of the
     response will be output, on multiple lines.

     The output 'out' ->data needs to be deallocate using
     'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_verify
-----------------------

 -- Function: int gnutls_ocsp_resp_verify (gnutls_ocsp_resp_t RESP,
          gnutls_x509_trust_list_t TRUSTLIST, unsigned int * VERIFY,
          unsigned int FLAGS)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     TRUSTLIST: trust anchors as a 'gnutls_x509_trust_list_t' structure

     VERIFY: output variable with verification status, an
     'gnutls_ocsp_cert_status_t'

     FLAGS: verification flags, 0 for now.

     Verify signature of the Basic OCSP Response against the public key
     in the certificate of a trusted signer.  The 'trustlist' should be
     populated with trust anchors.  The function will extract the signer
     certificate from the Basic OCSP Response and will verify it against
     the 'trustlist' .  A trusted signer is a certificate that is either
     in 'trustlist' , or it is signed directly by a certificate in
     'trustlist' and has the id-ad-ocspSigning Extended Key Usage bit
     set.

     The output 'verify' variable will hold verification status codes
     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
     the function returned 'GNUTLS_E_SUCCESS' .

     Note that the function returns 'GNUTLS_E_SUCCESS' even when
     verification failed.  The caller must always inspect the 'verify'
     variable to find out the verification status.

     The 'flags' variable should be 0 for now.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_ocsp_resp_verify_direct
------------------------------

 -- Function: int gnutls_ocsp_resp_verify_direct (gnutls_ocsp_resp_t
          RESP, gnutls_x509_crt_t ISSUER, unsigned int * VERIFY,
          unsigned int FLAGS)
     RESP: should contain a 'gnutls_ocsp_resp_t' structure

     ISSUER: certificate believed to have signed the response

     VERIFY: output variable with verification status, an
     'gnutls_ocsp_cert_status_t'

     FLAGS: verification flags, 0 for now.

     Verify signature of the Basic OCSP Response against the public key
     in the 'issuer' certificate.

     The output 'verify' variable will hold verification status codes
     (e.g., 'GNUTLS_OCSP_VERIFY_SIGNER_NOT_FOUND' ,
     'GNUTLS_OCSP_VERIFY_INSECURE_ALGORITHM' ) which are only valid if
     the function returned 'GNUTLS_E_SUCCESS' .

     Note that the function returns 'GNUTLS_E_SUCCESS' even when
     verification failed.  The caller must always inspect the 'verify'
     variable to find out the verification status.

     The 'flags' variable should be 0 for now.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.


File: gnutls.info,  Node: OpenPGP API,  Next: PKCS 12 API,  Prev: OCSP API,  Up: API reference

D.5 OpenPGP API
===============

The following functions are to be used for OpenPGP certificate handling.
Their prototypes lie in 'gnutls/openpgp.h'.

gnutls_certificate_set_openpgp_key
----------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key
          (gnutls_certificate_credentials_t RES, gnutls_openpgp_crt_t
          CRT, gnutls_openpgp_privkey_t PKEY)
     RES: is a 'gnutls_certificate_credentials_t' structure.

     CRT: contains an openpgp public key

     PKEY: is an openpgp private key

     This function sets a certificate/private key pair in the
     gnutls_certificate_credentials_t structure.  This function may be
     called more than once (in case multiple keys/certificates exist for
     the server).

     Note that this function requires that the preferred key ids have
     been set and be used.  See
     'gnutls_openpgp_crt_set_preferred_key_id()' .  Otherwise the master
     key will be used.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_certificate_set_openpgp_key_file
---------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_file
          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
          const char * KEYFILE, gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERTFILE: the file that contains the public key.

     KEYFILE: the file that contains the secret key.

     FORMAT: the format of the keys

     This funtion is used to load OpenPGP keys into the GnuTLS
     credentials structure.  The file should contain at least one valid
     non encrypted subkey.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_key_file2
----------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_file2
          (gnutls_certificate_credentials_t RES, const char * CERTFILE,
          const char * KEYFILE, const char * SUBKEY_ID,
          gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERTFILE: the file that contains the public key.

     KEYFILE: the file that contains the secret key.

     SUBKEY_ID: a hex encoded subkey id

     FORMAT: the format of the keys

     This funtion is used to load OpenPGP keys into the GnuTLS
     credential structure.  The file should contain at least one valid
     non encrypted subkey.

     The special keyword "auto" is also accepted as 'subkey_id' .  In
     that case the 'gnutls_openpgp_crt_get_auth_subkey()' will be used
     to retrieve the subkey.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.4.0

gnutls_certificate_set_openpgp_key_mem
--------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_mem
          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
          CERT, const gnutls_datum_t * KEY, gnutls_openpgp_crt_fmt_t
          FORMAT)
     RES: the destination context to save the data.

     CERT: the datum that contains the public key.

     KEY: the datum that contains the secret key.

     FORMAT: the format of the keys

     This funtion is used to load OpenPGP keys into the GnuTLS
     credential structure.  The datum should contain at least one valid
     non encrypted subkey.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_key_mem2
---------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_key_mem2
          (gnutls_certificate_credentials_t RES, const gnutls_datum_t *
          CERT, const gnutls_datum_t * KEY, const char * SUBKEY_ID,
          gnutls_openpgp_crt_fmt_t FORMAT)
     RES: the destination context to save the data.

     CERT: the datum that contains the public key.

     KEY: the datum that contains the secret key.

     SUBKEY_ID: a hex encoded subkey id

     FORMAT: the format of the keys

     This funtion is used to load OpenPGP keys into the GnuTLS
     credentials structure.  The datum should contain at least one valid
     non encrypted subkey.

     The special keyword "auto" is also accepted as 'subkey_id' .  In
     that case the 'gnutls_openpgp_crt_get_auth_subkey()' will be used
     to retrieve the subkey.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.4.0

gnutls_certificate_set_openpgp_keyring_file
-------------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_keyring_file
          (gnutls_certificate_credentials_t C, const char * FILE,
          gnutls_openpgp_crt_fmt_t FORMAT)
     C: A certificate credentials structure

     FILE: filename of the keyring.

     FORMAT: format of keyring.

     The function is used to set keyrings that will be used internally
     by various OpenPGP functions.  For example to find a key when it is
     needed for an operations.  The keyring will also be used at the
     verification functions.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_certificate_set_openpgp_keyring_mem
------------------------------------------

 -- Function: int gnutls_certificate_set_openpgp_keyring_mem
          (gnutls_certificate_credentials_t C, const uint8_t * DATA,
          size_t DLEN, gnutls_openpgp_crt_fmt_t FORMAT)
     C: A certificate credentials structure

     DATA: buffer with keyring data.

     DLEN: length of data buffer.

     FORMAT: the format of the keyring

     The function is used to set keyrings that will be used internally
     by various OpenPGP functions.  For example to find a key when it is
     needed for an operations.  The keyring will also be used at the
     verification functions.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_openpgp_crt_check_hostname
---------------------------------

 -- Function: int gnutls_openpgp_crt_check_hostname
          (gnutls_openpgp_crt_t KEY, const char * HOSTNAME)
     KEY: should contain a 'gnutls_openpgp_crt_t' structure

     HOSTNAME: A null terminated string that contains a DNS name

     This function will check if the given key's owner matches the given
     hostname.  This is a basic implementation of the matching described
     in RFC2818 (HTTPS), which takes into account wildcards.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_deinit
-------------------------

 -- Function: void gnutls_openpgp_crt_deinit (gnutls_openpgp_crt_t KEY)
     KEY: The structure to be initialized

     This function will deinitialize a key structure.

gnutls_openpgp_crt_export
-------------------------

 -- Function: int gnutls_openpgp_crt_export (gnutls_openpgp_crt_t KEY,
          gnutls_openpgp_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     OUTPUT_DATA: will contain the key base64 encoded or raw

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will convert the given key to RAW or Base64 format.
     If the buffer provided is not long enough to hold the output, then
     'GNUTLS_E_SHORT_MEMORY_BUFFER' will be returned.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_auth_subkey
----------------------------------

 -- Function: int gnutls_openpgp_crt_get_auth_subkey
          (gnutls_openpgp_crt_t CRT, gnutls_openpgp_keyid_t KEYID,
          unsigned int FLAG)
     CRT: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     FLAG: Non (0) indicates that a valid subkey is always returned.

     Returns the 64-bit keyID of the first valid OpenPGP subkey marked
     for authentication.  If flag is non (0) and no authentication
     subkey exists, then a valid subkey will be returned even if it is
     not marked for authentication.  Returns the 64-bit keyID of the
     first valid OpenPGP subkey marked for authentication.  If flag is
     non (0) and no authentication subkey exists, then a valid subkey
     will be returned even if it is not marked for authentication.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_creation_time
------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_creation_time
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     Get key creation time.

     *Returns:* the timestamp when the OpenPGP key was created.

gnutls_openpgp_crt_get_expiration_time
--------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_expiration_time
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     Get key expiration time.  A value of '0' means that the key doesn't
     expire at all.

     *Returns:* the time when the OpenPGP key expires.

gnutls_openpgp_crt_get_fingerprint
----------------------------------

 -- Function: int gnutls_openpgp_crt_get_fingerprint
          (gnutls_openpgp_crt_t KEY, void * FPR, size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP public key.

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     Get key fingerprint.  Depending on the algorithm, the fingerprint
     can be 16 or 20 bytes.

     *Returns:* On success, 0 is returned.  Otherwise, an error code.

gnutls_openpgp_crt_get_key_id
-----------------------------

 -- Function: int gnutls_openpgp_crt_get_key_id (gnutls_openpgp_crt_t
          KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the buffer to save the keyid.

     Get key id string.

     *Returns:* the 64-bit keyID of the OpenPGP key.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_key_usage
--------------------------------

 -- Function: int gnutls_openpgp_crt_get_key_usage (gnutls_openpgp_crt_t
          KEY, unsigned int * KEY_USAGE)
     KEY: should contain a gnutls_openpgp_crt_t structure

     KEY_USAGE: where the key usage bits will be stored

     This function will return certificate's key usage, by checking the
     key algorithm.  The key usage value will ORed values of the:
     'GNUTLS_KEY_DIGITAL_SIGNATURE' , 'GNUTLS_KEY_KEY_ENCIPHERMENT' .

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_get_name
---------------------------

 -- Function: int gnutls_openpgp_crt_get_name (gnutls_openpgp_crt_t KEY,
          int IDX, char * BUF, size_t * SIZEOF_BUF)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the index of the ID to extract

     BUF: a pointer to a structure to hold the name, may be 'NULL' to
     only get the 'sizeof_buf' .

     SIZEOF_BUF: holds the maximum size of 'buf' , on return hold the
     actual/required size of 'buf' .

     Extracts the userID from the parsed OpenPGP key.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, and if the index of the
     ID does not exist 'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' , or an
     error code.

gnutls_openpgp_crt_get_pk_algorithm
-----------------------------------

 -- Function: gnutls_pk_algorithm_t gnutls_openpgp_crt_get_pk_algorithm
          (gnutls_openpgp_crt_t KEY, unsigned int * BITS)
     KEY: is an OpenPGP key

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of an OpenPGP
     certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or GNUTLS_PK_UNKNOWN on error.

gnutls_openpgp_crt_get_pk_dsa_raw
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_pk_dsa_raw
          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * P, gnutls_datum_t
          * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
     CRT: Holds the certificate

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     This function will export the DSA public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_pk_rsa_raw
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_pk_rsa_raw
          (gnutls_openpgp_crt_t CRT, gnutls_datum_t * M, gnutls_datum_t
          * E)
     CRT: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_preferred_key_id
---------------------------------------

 -- Function: int gnutls_openpgp_crt_get_preferred_key_id
          (gnutls_openpgp_crt_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     Get preferred key id.  If it hasn't been set it returns
     'GNUTLS_E_INVALID_REQUEST' .

     *Returns:* the 64-bit preferred keyID of the OpenPGP key.

gnutls_openpgp_crt_get_revoked_status
-------------------------------------

 -- Function: int gnutls_openpgp_crt_get_revoked_status
          (gnutls_openpgp_crt_t KEY)
     KEY: the structure that contains the OpenPGP public key.

     Get revocation status of key.

     *Returns:* true (1) if the key has been revoked, or false (0) if it
     has not.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_count
-----------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_count
          (gnutls_openpgp_crt_t KEY)
     KEY: is an OpenPGP key

     This function will return the number of subkeys present in the
     given OpenPGP certificate.

     *Returns:* the number of subkeys, or a negative error code on
     error.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_creation_time
-------------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_subkey_creation_time
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     Get subkey creation time.

     *Returns:* the timestamp when the OpenPGP sub-key was created.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_expiration_time
---------------------------------------------

 -- Function: time_t gnutls_openpgp_crt_get_subkey_expiration_time
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     Get subkey expiration time.  A value of '0' means that the key
     doesn't expire at all.

     *Returns:* the time when the OpenPGP key expires.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_fingerprint
-----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_fingerprint
          (gnutls_openpgp_crt_t KEY, unsigned int IDX, void * FPR,
          size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP public key.

     IDX: the subkey index

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     Get key fingerprint of a subkey.  Depending on the algorithm, the
     fingerprint can be 16 or 20 bytes.

     *Returns:* On success, 0 is returned.  Otherwise, an error code.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_id
--------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_id (gnutls_openpgp_crt_t
          KEY, unsigned int IDX, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     IDX: the subkey index

     KEYID: the buffer to save the keyid.

     Get the subkey's key-id.

     *Returns:* the 64-bit keyID of the OpenPGP key.

gnutls_openpgp_crt_get_subkey_idx
---------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_idx
          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the keyid.

     Get subkey's index.

     *Returns:* the index of the subkey or a negative error value.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_algorithm
------------------------------------------

 -- Function: gnutls_pk_algorithm_t
          gnutls_openpgp_crt_get_subkey_pk_algorithm
          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
          BITS)
     KEY: is an OpenPGP key

     IDX: is the subkey index

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of a subkey of
     an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or GNUTLS_PK_UNKNOWN on error.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_dsa_raw
----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_pk_dsa_raw
          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
          P, gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y)
     CRT: Holds the certificate

     IDX: Is the subkey index

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     This function will export the DSA public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_pk_rsa_raw
----------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_pk_rsa_raw
          (gnutls_openpgp_crt_t CRT, unsigned int IDX, gnutls_datum_t *
          M, gnutls_datum_t * E)
     CRT: Holds the certificate

     IDX: Is the subkey index

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_revoked_status
--------------------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_revoked_status
          (gnutls_openpgp_crt_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP public key.

     IDX: is the subkey index

     Get subkey revocation status.  A negative error code indicates an
     error.

     *Returns:* true (1) if the key has been revoked, or false (0) if it
     has not.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_subkey_usage
-----------------------------------

 -- Function: int gnutls_openpgp_crt_get_subkey_usage
          (gnutls_openpgp_crt_t KEY, unsigned int IDX, unsigned int *
          KEY_USAGE)
     KEY: should contain a gnutls_openpgp_crt_t structure

     IDX: the subkey index

     KEY_USAGE: where the key usage bits will be stored

     This function will return certificate's key usage, by checking the
     key algorithm.  The key usage value will ORed values of
     'GNUTLS_KEY_DIGITAL_SIGNATURE' or 'GNUTLS_KEY_KEY_ENCIPHERMENT' .

     A negative error code may be returned in case of parsing error.

     *Returns:* key usage value.

     *Since:* 2.4.0

gnutls_openpgp_crt_get_version
------------------------------

 -- Function: int gnutls_openpgp_crt_get_version (gnutls_openpgp_crt_t
          KEY)
     KEY: the structure that contains the OpenPGP public key.

     Extract the version of the OpenPGP key.

     *Returns:* the version number is returned, or a negative error code
     on errors.

gnutls_openpgp_crt_import
-------------------------

 -- Function: int gnutls_openpgp_crt_import (gnutls_openpgp_crt_t KEY,
          const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     This function will convert the given RAW or Base64 encoded key to
     the native 'gnutls_openpgp_crt_t' format.  The output will be
     stored in 'key'.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_init
-----------------------

 -- Function: int gnutls_openpgp_crt_init (gnutls_openpgp_crt_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an OpenPGP key structure.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_print
------------------------

 -- Function: int gnutls_openpgp_crt_print (gnutls_openpgp_crt_t CERT,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     CERT: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with (0) terminated string.

     This function will pretty print an OpenPGP certificate, suitable
     for display to a human.

     The format should be (0) for future compatibility.

     The output 'out' needs to be deallocate using 'gnutls_free()' .

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_set_preferred_key_id
---------------------------------------

 -- Function: int gnutls_openpgp_crt_set_preferred_key_id
          (gnutls_openpgp_crt_t KEY, const gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the selected keyid

     This allows setting a preferred key id for the given certificate.
     This key will be used by functions that involve key handling.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_openpgp_crt_verify_ring
------------------------------

 -- Function: int gnutls_openpgp_crt_verify_ring (gnutls_openpgp_crt_t
          KEY, gnutls_openpgp_keyring_t KEYRING, unsigned int FLAGS,
          unsigned int * VERIFY)
     KEY: the structure that holds the key.

     KEYRING: holds the keyring to check against

     FLAGS: unused (should be 0)

     VERIFY: will hold the certificate verification output.

     Verify all signatures in the key, using the given set of keys
     (keyring).

     The key verification output will be put in 'verify' and will be one
     or more of the 'gnutls_certificate_status_t' enumerated elements
     bitwise or'd.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_crt_verify_self
------------------------------

 -- Function: int gnutls_openpgp_crt_verify_self (gnutls_openpgp_crt_t
          KEY, unsigned int FLAGS, unsigned int * VERIFY)
     KEY: the structure that holds the key.

     FLAGS: unused (should be 0)

     VERIFY: will hold the key verification output.

     Verifies the self signature in the key.  The key verification
     output will be put in 'verify' and will be one or more of the
     gnutls_certificate_status_t enumerated elements bitwise or'd.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_check_id
-------------------------------

 -- Function: int gnutls_openpgp_keyring_check_id
          (gnutls_openpgp_keyring_t RING, const gnutls_openpgp_keyid_t
          KEYID, unsigned int FLAGS)
     RING: holds the keyring to check against

     KEYID: will hold the keyid to check for.

     FLAGS: unused (should be 0)

     Check if a given key ID exists in the keyring.

     *Returns:* 'GNUTLS_E_SUCCESS' on success (if keyid exists) and a
     negative error code on failure.

gnutls_openpgp_keyring_deinit
-----------------------------

 -- Function: void gnutls_openpgp_keyring_deinit
          (gnutls_openpgp_keyring_t KEYRING)
     KEYRING: The structure to be initialized

     This function will deinitialize a keyring structure.

gnutls_openpgp_keyring_get_crt
------------------------------

 -- Function: int gnutls_openpgp_keyring_get_crt
          (gnutls_openpgp_keyring_t RING, unsigned int IDX,
          gnutls_openpgp_crt_t * CERT)
     RING: Holds the keyring.

     IDX: the index of the certificate to export

     CERT: An uninitialized 'gnutls_openpgp_crt_t' structure

     This function will extract an OpenPGP certificate from the given
     keyring.  If the index given is out of range
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.  The
     returned structure needs to be deinited.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_get_crt_count
------------------------------------

 -- Function: int gnutls_openpgp_keyring_get_crt_count
          (gnutls_openpgp_keyring_t RING)
     RING: is an OpenPGP key ring

     This function will return the number of OpenPGP certificates
     present in the given keyring.

     *Returns:* the number of subkeys, or a negative error code on
     error.

gnutls_openpgp_keyring_import
-----------------------------

 -- Function: int gnutls_openpgp_keyring_import
          (gnutls_openpgp_keyring_t KEYRING, const gnutls_datum_t *
          DATA, gnutls_openpgp_crt_fmt_t FORMAT)
     KEYRING: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded keyring.

     FORMAT: One of 'gnutls_openpgp_keyring_fmt' elements.

     This function will convert the given RAW or Base64 encoded keyring
     to the native 'gnutls_openpgp_keyring_t' format.  The output will
     be stored in 'keyring'.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_keyring_init
---------------------------

 -- Function: int gnutls_openpgp_keyring_init (gnutls_openpgp_keyring_t
          * KEYRING)
     KEYRING: The structure to be initialized

     This function will initialize an keyring structure.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_deinit
-----------------------------

 -- Function: void gnutls_openpgp_privkey_deinit
          (gnutls_openpgp_privkey_t KEY)
     KEY: The structure to be initialized

     This function will deinitialize a key structure.

gnutls_openpgp_privkey_export
-----------------------------

 -- Function: int gnutls_openpgp_privkey_export
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_crt_fmt_t
          FORMAT, const char * PASSWORD, unsigned int FLAGS, void *
          OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
     KEY: Holds the key.

     FORMAT: One of gnutls_openpgp_crt_fmt_t elements.

     PASSWORD: the password that will be used to encrypt the key.
     (unused for now)

     FLAGS: (0) for future compatibility

     OUTPUT_DATA: will contain the key base64 encoded or raw

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will convert the given key to RAW or Base64 format.
     If the buffer provided is not long enough to hold the output, then
     GNUTLS_E_SHORT_MEMORY_BUFFER will be returned.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_export_dsa_raw
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_dsa_raw
          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * P,
          gnutls_datum_t * Q, gnutls_datum_t * G, gnutls_datum_t * Y,
          gnutls_datum_t * X)
     PKEY: Holds the certificate

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     This function will export the DSA private key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_export_rsa_raw
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_rsa_raw
          (gnutls_openpgp_privkey_t PKEY, gnutls_datum_t * M,
          gnutls_datum_t * E, gnutls_datum_t * D, gnutls_datum_t * P,
          gnutls_datum_t * Q, gnutls_datum_t * U)
     PKEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     This function will export the RSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_export_subkey_dsa_raw
--------------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_subkey_dsa_raw
          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y, gnutls_datum_t * X)
     PKEY: Holds the certificate

     IDX: Is the subkey index

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     This function will export the DSA private key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_export_subkey_rsa_raw
--------------------------------------------

 -- Function: int gnutls_openpgp_privkey_export_subkey_rsa_raw
          (gnutls_openpgp_privkey_t PKEY, unsigned int IDX,
          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U)
     PKEY: Holds the certificate

     IDX: Is the subkey index

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     This function will export the RSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_fingerprint
--------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_fingerprint
          (gnutls_openpgp_privkey_t KEY, void * FPR, size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP secret key.

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     Get the fingerprint of the OpenPGP key.  Depends on the algorithm,
     the fingerprint can be 16 or 20 bytes.

     *Returns:* On success, 0 is returned, or an error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_key_id
---------------------------------

 -- Function: int gnutls_openpgp_privkey_get_key_id
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP secret key.

     KEYID: the buffer to save the keyid.

     Get key-id.

     *Returns:* the 64-bit keyID of the OpenPGP key.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_pk_algorithm
---------------------------------------

 -- Function: gnutls_pk_algorithm_t
          gnutls_openpgp_privkey_get_pk_algorithm
          (gnutls_openpgp_privkey_t KEY, unsigned int * BITS)
     KEY: is an OpenPGP key

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of an OpenPGP
     certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_preferred_key_id
-------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_preferred_key_id
          (gnutls_openpgp_privkey_t KEY, gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the struct to save the keyid.

     Get the preferred key-id for the key.

     *Returns:* the 64-bit preferred keyID of the OpenPGP key, or if it
     hasn't been set it returns 'GNUTLS_E_INVALID_REQUEST' .

gnutls_openpgp_privkey_get_revoked_status
-----------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_revoked_status
          (gnutls_openpgp_privkey_t KEY)
     KEY: the structure that contains the OpenPGP private key.

     Get revocation status of key.

     *Returns:* true (1) if the key has been revoked, or false (0) if it
     has not, or a negative error code indicates an error.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_count
---------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_count
          (gnutls_openpgp_privkey_t KEY)
     KEY: is an OpenPGP key

     This function will return the number of subkeys present in the
     given OpenPGP certificate.

     *Returns:* the number of subkeys, or a negative error code on
     error.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_creation_time
-----------------------------------------------

 -- Function: time_t gnutls_openpgp_privkey_get_subkey_creation_time
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP private key.

     IDX: the subkey index

     Get subkey creation time.

     *Returns:* the timestamp when the OpenPGP key was created.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_fingerprint
---------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_fingerprint
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, void * FPR,
          size_t * FPRLEN)
     KEY: the raw data that contains the OpenPGP secret key.

     IDX: the subkey index

     FPR: the buffer to save the fingerprint, must hold at least 20
     bytes.

     FPRLEN: the integer to save the length of the fingerprint.

     Get the fingerprint of an OpenPGP subkey.  Depends on the
     algorithm, the fingerprint can be 16 or 20 bytes.

     *Returns:* On success, 0 is returned, or an error code.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_id
------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_id
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX,
          gnutls_openpgp_keyid_t KEYID)
     KEY: the structure that contains the OpenPGP secret key.

     IDX: the subkey index

     KEYID: the buffer to save the keyid.

     Get the key-id for the subkey.

     *Returns:* the 64-bit keyID of the OpenPGP key.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_idx
-------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_idx
          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
          KEYID)
     KEY: the structure that contains the OpenPGP private key.

     KEYID: the keyid.

     Get index of subkey.

     *Returns:* the index of the subkey or a negative error value.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_pk_algorithm
----------------------------------------------

 -- Function: gnutls_pk_algorithm_t
          gnutls_openpgp_privkey_get_subkey_pk_algorithm
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX, unsigned int
          * BITS)
     KEY: is an OpenPGP key

     IDX: is the subkey index

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of a subkey of
     an OpenPGP certificate.

     If bits is non null, it should have enough size to hold the
     parameters size in bits.  For RSA the bits returned is the modulus.
     For DSA the bits returned are of the public exponent.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.4.0

gnutls_openpgp_privkey_get_subkey_revoked_status
------------------------------------------------

 -- Function: int gnutls_openpgp_privkey_get_subkey_revoked_status
          (gnutls_openpgp_privkey_t KEY, unsigned int IDX)
     KEY: the structure that contains the OpenPGP private key.

     IDX: is the subkey index

     Get revocation status of key.

     *Returns:* true (1) if the key has been revoked, or false (0) if it
     has not, or a negative error code indicates an error.

     *Since:* 2.4.0

gnutls_openpgp_privkey_import
-----------------------------

 -- Function: int gnutls_openpgp_privkey_import
          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * DATA,
          gnutls_openpgp_crt_fmt_t FORMAT, const char * PASSWORD,
          unsigned int FLAGS)
     KEY: The structure to store the parsed key.

     DATA: The RAW or BASE64 encoded key.

     FORMAT: One of 'gnutls_openpgp_crt_fmt_t' elements.

     PASSWORD: not used for now

     FLAGS: should be (0)

     This function will convert the given RAW or Base64 encoded key to
     the native gnutls_openpgp_privkey_t format.  The output will be
     stored in 'key'.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_init
---------------------------

 -- Function: int gnutls_openpgp_privkey_init (gnutls_openpgp_privkey_t
          * KEY)
     KEY: The structure to be initialized

     This function will initialize an OpenPGP key structure.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_sec_param
--------------------------------

 -- Function: gnutls_sec_param_t gnutls_openpgp_privkey_sec_param
          (gnutls_openpgp_privkey_t KEY)
     KEY: a key structure

     This function will return the security parameter appropriate with
     this private key.

     *Returns:* On success, a valid security parameter is returned
     otherwise 'GNUTLS_SEC_PARAM_UNKNOWN' is returned.

     *Since:* 2.12.0

gnutls_openpgp_privkey_set_preferred_key_id
-------------------------------------------

 -- Function: int gnutls_openpgp_privkey_set_preferred_key_id
          (gnutls_openpgp_privkey_t KEY, const gnutls_openpgp_keyid_t
          KEYID)
     KEY: the structure that contains the OpenPGP public key.

     KEYID: the selected keyid

     This allows setting a preferred key id for the given certificate.
     This key will be used by functions that involve key handling.

     *Returns:* On success, 0 is returned, or an error code.

gnutls_openpgp_set_recv_key_function
------------------------------------

 -- Function: void gnutls_openpgp_set_recv_key_function
          (gnutls_session_t SESSION, gnutls_openpgp_recv_key_func FUNC)
     SESSION: a TLS session

     FUNC: the callback

     This funtion will set a key retrieval function for OpenPGP keys.
     This callback is only useful in server side, and will be used if
     the peer sent a key fingerprint instead of a full key.


File: gnutls.info,  Node: PKCS 12 API,  Next: PKCS 11 API,  Prev: OpenPGP API,  Up: API reference

D.6 PKCS 12 API
===============

The following functions are to be used for PKCS 12 handling.  Their
prototypes lie in 'gnutls/pkcs12.h'.

gnutls_pkcs12_bag_decrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_decrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII.

     This function will decrypt the given encrypted bag and return 0 on
     success.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_deinit
------------------------

 -- Function: void gnutls_pkcs12_bag_deinit (gnutls_pkcs12_bag_t BAG)
     BAG: The structure to be initialized

     This function will deinitialize a PKCS12 Bag structure.

gnutls_pkcs12_bag_encrypt
-------------------------

 -- Function: int gnutls_pkcs12_bag_encrypt (gnutls_pkcs12_bag_t BAG,
          const char * PASS, unsigned int FLAGS)
     BAG: The bag

     PASS: The password used for encryption, must be ASCII

     FLAGS: should be one of 'gnutls_pkcs_encrypt_flags_t' elements
     bitwise or'd

     This function will encrypt the given bag.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error code is returned.

gnutls_pkcs12_bag_get_count
---------------------------

 -- Function: int gnutls_pkcs12_bag_get_count (gnutls_pkcs12_bag_t BAG)
     BAG: The bag

     This function will return the number of the elements withing the
     bag.

     *Returns:* Number of elements in bag, or an negative error code on
     error.

gnutls_pkcs12_bag_get_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_get_data (gnutls_pkcs12_bag_t BAG,
          int INDX, gnutls_datum_t * DATA)
     BAG: The bag

     INDX: The element of the bag to get the data from

     DATA: where the bag's data will be.  Should be treated as constant.

     This function will return the bag's data.  The data is a constant
     that is stored into the bag.  Should not be accessed after the bag
     is deleted.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_get_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_get_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, char ** NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: will hold a pointer to the name (to be treated as const)

     This function will return the friendly name, of the specified bag
     element.  The key ID is usually used to distinguish the local
     private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_get_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_get_key_id (gnutls_pkcs12_bag_t BAG,
          int INDX, gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: where the ID will be copied (to be treated as const)

     This function will return the key ID, of the specified bag element.
     The key ID is usually used to distinguish the local private key and
     the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_get_type
--------------------------

 -- Function: gnutls_pkcs12_bag_type_t gnutls_pkcs12_bag_get_type
          (gnutls_pkcs12_bag_t BAG, int INDX)
     BAG: The bag

     INDX: The element of the bag to get the type

     This function will return the bag's type.

     *Returns:* One of the 'gnutls_pkcs12_bag_type_t' enumerations.

gnutls_pkcs12_bag_init
----------------------

 -- Function: int gnutls_pkcs12_bag_init (gnutls_pkcs12_bag_t * BAG)
     BAG: The structure to be initialized

     This function will initialize a PKCS12 bag structure.  PKCS12 Bags
     usually contain private keys, lists of X.509 Certificates and X.509
     Certificate revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_bag_set_crl
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crl (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crl_t CRL)
     BAG: The bag

     CRL: the CRL to be copied.

     This function will insert the given CRL into the bag.  This is just
     a wrapper over 'gnutls_pkcs12_bag_set_data()' .

     *Returns:* the index of the added bag on success, or a negative
     error code on failure.

gnutls_pkcs12_bag_set_crt
-------------------------

 -- Function: int gnutls_pkcs12_bag_set_crt (gnutls_pkcs12_bag_t BAG,
          gnutls_x509_crt_t CRT)
     BAG: The bag

     CRT: the certificate to be copied.

     This function will insert the given certificate into the bag.  This
     is just a wrapper over 'gnutls_pkcs12_bag_set_data()' .

     *Returns:* the index of the added bag on success, or a negative
     value on failure.

gnutls_pkcs12_bag_set_data
--------------------------

 -- Function: int gnutls_pkcs12_bag_set_data (gnutls_pkcs12_bag_t BAG,
          gnutls_pkcs12_bag_type_t TYPE, const gnutls_datum_t * DATA)
     BAG: The bag

     TYPE: The data's type

     DATA: the data to be copied.

     This function will insert the given data of the given type into the
     bag.

     *Returns:* the index of the added bag on success, or a negative
     value on error.

gnutls_pkcs12_bag_set_friendly_name
-----------------------------------

 -- Function: int gnutls_pkcs12_bag_set_friendly_name
          (gnutls_pkcs12_bag_t BAG, int INDX, const char * NAME)
     BAG: The bag

     INDX: The bag's element to add the id

     NAME: the name

     This function will add the given key friendly name, to the
     specified, by the index, bag element.  The name will be encoded as
     a 'Friendly name' bag attribute, which is usually used to set a
     user name to the local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_bag_set_key_id
----------------------------

 -- Function: int gnutls_pkcs12_bag_set_key_id (gnutls_pkcs12_bag_t BAG,
          int INDX, const gnutls_datum_t * ID)
     BAG: The bag

     INDX: The bag's element to add the id

     ID: the ID

     This function will add the given key ID, to the specified, by the
     index, bag element.  The key ID will be encoded as a 'Local key
     identifier' bag attribute, which is usually used to distinguish the
     local private key and the certificate pair.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.  or a negative error code on
     error.

gnutls_pkcs12_deinit
--------------------

 -- Function: void gnutls_pkcs12_deinit (gnutls_pkcs12_t PKCS12)
     PKCS12: The structure to be initialized

     This function will deinitialize a PKCS12 structure.

gnutls_pkcs12_export
--------------------

 -- Function: int gnutls_pkcs12_export (gnutls_pkcs12_t PKCS12,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     PKCS12: Holds the pkcs12 structure

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a structure PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the pkcs12 structure to DER or PEM
     format.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size will be updated and GNUTLS_E_SHORT_MEMORY_BUFFER
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     PKCS12".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

gnutls_pkcs12_generate_mac
--------------------------

 -- Function: int gnutls_pkcs12_generate_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     This function will generate a MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_get_bag
---------------------

 -- Function: int gnutls_pkcs12_get_bag (gnutls_pkcs12_t PKCS12, int
          INDX, gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     INDX: contains the index of the bag to extract

     BAG: An initialized bag, where the contents of the bag will be
     copied

     This function will return a Bag from the PKCS12 structure.

     After the last Bag has been read
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' will be returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_import
--------------------

 -- Function: int gnutls_pkcs12_import (gnutls_pkcs12_t PKCS12, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT, unsigned
          int FLAGS)
     PKCS12: The structure to store the parsed PKCS12.

     DATA: The DER or PEM encoded PKCS12.

     FORMAT: One of DER or PEM

     FLAGS: an ORed sequence of gnutls_privkey_pkcs8_flags

     This function will convert the given DER or PEM encoded PKCS12 to
     the native gnutls_pkcs12_t format.  The output will be stored in
     'pkcs12'.

     If the PKCS12 is PEM encoded it should have a header of "PKCS12".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_init
------------------

 -- Function: int gnutls_pkcs12_init (gnutls_pkcs12_t * PKCS12)
     PKCS12: The structure to be initialized

     This function will initialize a PKCS12 structure.  PKCS12
     structures usually contain lists of X.509 Certificates and X.509
     Certificate revocation lists.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_set_bag
---------------------

 -- Function: int gnutls_pkcs12_set_bag (gnutls_pkcs12_t PKCS12,
          gnutls_pkcs12_bag_t BAG)
     PKCS12: should contain a gnutls_pkcs12_t structure

     BAG: An initialized bag

     This function will insert a Bag into the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs12_verify_mac
------------------------

 -- Function: int gnutls_pkcs12_verify_mac (gnutls_pkcs12_t PKCS12,
          const char * PASS)
     PKCS12: should contain a gnutls_pkcs12_t structure

     PASS: The password for the MAC

     This function will verify the MAC for the PKCS12 structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.


File: gnutls.info,  Node: PKCS 11 API,  Next: Abstract key API,  Prev: PKCS 12 API,  Up: API reference

D.7 Hardware token via PKCS 11 API
==================================

The following functions are to be used for PKCS 11 handling.  Their
prototypes lie in 'gnutls/pkcs11.h'.

gnutls_pkcs11_add_provider
--------------------------

 -- Function: int gnutls_pkcs11_add_provider (const char * NAME, const
          char * PARAMS)
     NAME: The filename of the module

     PARAMS: should be NULL

     This function will load and add a PKCS 11 module to the module list
     used in gnutls.  After this function is called the module will be
     used for PKCS 11 operations.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_secret_key
-----------------------------

 -- Function: int gnutls_pkcs11_copy_secret_key (const char * TOKEN_URL,
          gnutls_datum_t * KEY, const char * LABEL, unsigned int
          KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     KEY: The raw key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a raw secret (symmetric) key into a PKCS
     '11' token specified by a URL. The key can be marked as sensitive
     or not.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_x509_crt
---------------------------

 -- Function: int gnutls_pkcs11_copy_x509_crt (const char * TOKEN_URL,
          gnutls_x509_crt_t CRT, const char * LABEL, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     CRT: A certificate

     LABEL: A name to be used for the stored data

     FLAGS: One of GNUTLS_PKCS11_OBJ_FLAG_*

     This function will copy a certificate into a PKCS '11' token
     specified by a URL. The certificate can be marked as trusted or
     not.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_copy_x509_privkey
-------------------------------

 -- Function: int gnutls_pkcs11_copy_x509_privkey (const char *
          TOKEN_URL, gnutls_x509_privkey_t KEY, const char * LABEL,
          unsigned int KEY_USAGE, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     KEY: A private key

     LABEL: A name to be used for the stored data

     KEY_USAGE: One of GNUTLS_KEY_*

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will copy a private key into a PKCS '11' token
     specified by a URL. It is highly recommended flags to contain
     'GNUTLS_PKCS11_OBJ_FLAG_MARK_SENSITIVE' unless there is a strong
     reason not to.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_deinit
--------------------

 -- Function: void gnutls_pkcs11_deinit ( VOID)

     This function will deinitialize the PKCS 11 subsystem in gnutls.

     *Since:* 2.12.0

gnutls_pkcs11_delete_url
------------------------

 -- Function: int gnutls_pkcs11_delete_url (const char * OBJECT_URL,
          unsigned int FLAGS)
     OBJECT_URL: The URL of the object to delete.

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will delete objects matching the given URL. Note that
     not all tokens support the delete operation.

     *Returns:* On success, the number of objects deleted is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_init
------------------

 -- Function: int gnutls_pkcs11_init (unsigned int FLAGS, const char *
          DEPRECATED_CONFIG_FILE)
     FLAGS: 'GNUTLS_PKCS11_FLAG_MANUAL' or 'GNUTLS_PKCS11_FLAG_AUTO'

     DEPRECATED_CONFIG_FILE: either NULL or the location of a deprecated
     configuration file

     This function will initialize the PKCS 11 subsystem in gnutls.  It
     will read configuration files if 'GNUTLS_PKCS11_FLAG_AUTO' is used
     or allow you to independently load PKCS 11 modules using
     'gnutls_pkcs11_add_provider()' if 'GNUTLS_PKCS11_FLAG_MANUAL' is
     specified.

     Normally you don't need to call this function since it is being
     called by 'gnutls_global_init()' using the
     'GNUTLS_PKCS11_FLAG_AUTO' .  If other option is required then it
     must be called before it.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_deinit
------------------------

 -- Function: void gnutls_pkcs11_obj_deinit (gnutls_pkcs11_obj_t OBJ)
     OBJ: The structure to be initialized

     This function will deinitialize a certificate structure.

     *Since:* 2.12.0

gnutls_pkcs11_obj_export
------------------------

 -- Function: int gnutls_pkcs11_obj_export (gnutls_pkcs11_obj_t OBJ,
          void * OUTPUT_DATA, size_t * OUTPUT_DATA_SIZE)
     OBJ: Holds the object

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the PKCS11 object data.  It is normal for
     data to be inaccesible and in that case 'GNUTLS_E_INVALID_REQUEST'
     will be returned.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and GNUTLS_E_SHORT_MEMORY_BUFFER will
     be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     *Returns:* In case of failure a negative error code will be
     returned, and 'GNUTLS_E_SUCCESS' (0) on success.

     *Since:* 2.12.0

gnutls_pkcs11_obj_export_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_export_url (gnutls_pkcs11_obj_t OBJ,
          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     OBJ: Holds the PKCS 11 certificate

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will export a URL identifying the given certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_get_info
--------------------------

 -- Function: int gnutls_pkcs11_obj_get_info (gnutls_pkcs11_obj_t CRT,
          gnutls_pkcs11_obj_info_t ITYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     CRT: should contain a 'gnutls_pkcs11_obj_t' structure

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     This function will return information about the PKCS11 certificate
     such as the label, id as well as token information where the key is
     stored.  When output is text it returns null terminated string
     although 'output_size' contains the size of the actual data only.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_obj_get_type
--------------------------

 -- Function: gnutls_pkcs11_obj_type_t gnutls_pkcs11_obj_get_type
          (gnutls_pkcs11_obj_t OBJ)
     OBJ: Holds the PKCS 11 object

     This function will return the type of the certificate being stored
     in the structure.

     *Returns:* The type of the certificate.

     *Since:* 2.12.0

gnutls_pkcs11_obj_import_url
----------------------------

 -- Function: int gnutls_pkcs11_obj_import_url (gnutls_pkcs11_obj_t
          CERT, const char * URL, unsigned int FLAGS)
     CERT: The structure to store the parsed certificate

     URL: a PKCS 11 url identifying the key

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will "import" a PKCS 11 URL identifying a certificate
     key to the 'gnutls_pkcs11_obj_t' structure.  This does not involve
     any parsing (such as X.509 or OpenPGP) since the
     'gnutls_pkcs11_obj_t' is format agnostic.  Only data are
     transferred.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_init
----------------------

 -- Function: int gnutls_pkcs11_obj_init (gnutls_pkcs11_obj_t * OBJ)
     OBJ: The structure to be initialized

     This function will initialize a pkcs11 certificate structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_obj_list_import_url
---------------------------------

 -- Function: int gnutls_pkcs11_obj_list_import_url (gnutls_pkcs11_obj_t
          * P_LIST, unsigned int * N_LIST, const char * URL,
          gnutls_pkcs11_obj_attr_t ATTRS, unsigned int FLAGS)
     P_LIST: An uninitialized object list (may be NULL)

     N_LIST: initially should hold the maximum size of the list.  Will
     contain the actual size.

     URL: A PKCS 11 url identifying a set of objects

     ATTRS: Attributes of type 'gnutls_pkcs11_obj_attr_t' that can be
     used to limit output

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will initialize and set values to an object list by
     using all objects identified by a PKCS 11 URL.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_privkey_deinit
----------------------------

 -- Function: void gnutls_pkcs11_privkey_deinit (gnutls_pkcs11_privkey_t
          KEY)
     KEY: The structure to be initialized

     This function will deinitialize a private key structure.

gnutls_pkcs11_privkey_export_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_export_url
          (gnutls_pkcs11_privkey_t KEY, gnutls_pkcs11_url_type_t
          DETAILED, char ** URL)
     KEY: Holds the PKCS 11 key

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will export a URL identifying the given key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_generate
------------------------------

 -- Function: int gnutls_pkcs11_privkey_generate (const char* URL,
          gnutls_pk_algorithm_t PK, unsigned int BITS, const char*
          LABEL, unsigned int FLAGS)
     URL: a token URL

     PK: the public key algorithm

     BITS: the security bits

     LABEL: a label

     FLAGS: should be zero

     This function will generate a private key in the specified by the
     'url' token.  The pivate key will be generate within the token and
     will not be exportable.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pkcs11_privkey_get_info
------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_info
          (gnutls_pkcs11_privkey_t PKEY, gnutls_pkcs11_obj_info_t ITYPE,
          void * OUTPUT, size_t * OUTPUT_SIZE)
     PKEY: should contain a 'gnutls_pkcs11_privkey_t' structure

     ITYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     This function will return information about the PKCS 11 private key
     such as the label, id as well as token information where the key is
     stored.  When output is text it returns null terminated string
     although 'output_size' contains the size of the actual data only.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

gnutls_pkcs11_privkey_get_pk_algorithm
--------------------------------------

 -- Function: int gnutls_pkcs11_privkey_get_pk_algorithm
          (gnutls_pkcs11_privkey_t KEY, unsigned int * BITS)
     KEY: should contain a 'gnutls_pkcs11_privkey_t' structure

     BITS: if bits is non null it will hold the size of the parameters'
     in bits

     This function will return the public key algorithm of a private
     key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

gnutls_pkcs11_privkey_import_url
--------------------------------

 -- Function: int gnutls_pkcs11_privkey_import_url
          (gnutls_pkcs11_privkey_t PKEY, const char * URL, unsigned int
          FLAGS)
     PKEY: The structure to store the parsed key

     URL: a PKCS 11 url identifying the key

     FLAGS: sequence of GNUTLS_PKCS_PRIVKEY_*

     This function will "import" a PKCS 11 URL identifying a private key
     to the 'gnutls_pkcs11_privkey_t' structure.  In reality since in
     most cases keys cannot be exported, the private key structure is
     being associated with the available operations on the token.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_privkey_init
--------------------------

 -- Function: int gnutls_pkcs11_privkey_init (gnutls_pkcs11_privkey_t *
          KEY)
     KEY: The structure to be initialized

     This function will initialize an private key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_reinit
--------------------

 -- Function: int gnutls_pkcs11_reinit ( VOID)

     This function will reinitialize the PKCS 11 subsystem in gnutls.
     This is required by PKCS 11 when an application uses 'fork()' .
     The reinitialization function must be called on the child.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pkcs11_set_pin_function
------------------------------

 -- Function: void gnutls_pkcs11_set_pin_function
          (gnutls_pkcs11_pin_callback_t FN, void * USERDATA)
     FN: The PIN callback, a 'gnutls_pkcs11_pin_callback_t()' function.

     USERDATA: data to be supplied to callback

     This function will set a callback function to be used when a PIN is
     required for PKCS 11 operations.  See
     'gnutls_pkcs11_pin_callback_t()' on how the callback should behave.

     *Since:* 2.12.0

gnutls_pkcs11_set_token_function
--------------------------------

 -- Function: void gnutls_pkcs11_set_token_function
          (gnutls_pkcs11_token_callback_t FN, void * USERDATA)
     FN: The token callback

     USERDATA: data to be supplied to callback

     This function will set a callback function to be used when a token
     needs to be inserted to continue PKCS 11 operations.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_flags
-----------------------------

 -- Function: int gnutls_pkcs11_token_get_flags (const char * URL,
          unsigned int * FLAGS)
     URL: should contain a PKCS 11 URL

     FLAGS: The output flags (GNUTLS_PKCS11_TOKEN_*)

     This function will return information about the PKCS 11 token
     flags.  The flags from the 'gnutls_pkcs11_token_info_t'
     enumeration.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_info
----------------------------

 -- Function: int gnutls_pkcs11_token_get_info (const char * URL,
          gnutls_pkcs11_token_info_t TTYPE, void * OUTPUT, size_t *
          OUTPUT_SIZE)
     URL: should contain a PKCS 11 URL

     TTYPE: Denotes the type of information requested

     OUTPUT: where output will be stored

     OUTPUT_SIZE: contains the maximum size of the output and will be
     overwritten with actual

     This function will return information about the PKCS 11 token such
     as the label, id, etc.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_mechanism
---------------------------------

 -- Function: int gnutls_pkcs11_token_get_mechanism (const char * URL,
          unsigned int IDX, unsigned long * MECHANISM)
     URL: should contain a PKCS 11 URL

     IDX: The index of the mechanism

     MECHANISM: The PKCS '11' mechanism ID

     This function will return the names of the supported mechanisms by
     the token.  It should be called with an increasing index until it
     return GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success or a negative error
     code on error.

     *Since:* 2.12.0

gnutls_pkcs11_token_get_url
---------------------------

 -- Function: int gnutls_pkcs11_token_get_url (unsigned int SEQ,
          gnutls_pkcs11_url_type_t DETAILED, char ** URL)
     SEQ: sequence number starting from 0

     DETAILED: non zero if a detailed URL is required

     URL: will contain an allocated url

     This function will return the URL for each token available in
     system.  The url has to be released using 'gnutls_free()'

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' if the sequence number
     exceeds the available tokens, otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pkcs11_token_init
------------------------

 -- Function: int gnutls_pkcs11_token_init (const char * TOKEN_URL,
          const char * SO_PIN, const char * LABEL)
     TOKEN_URL: A PKCS '11' URL specifying a token

     SO_PIN: Security Officer's PIN

     LABEL: A name to be used for the token

     This function will initialize (format) a token.  If the token is at
     a factory defaults state the security officer's PIN given will be
     set to be the default.  Otherwise it should match the officer's
     PIN.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_token_set_pin
---------------------------

 -- Function: int gnutls_pkcs11_token_set_pin (const char * TOKEN_URL,
          const char * OLDPIN, const char * NEWPIN, unsigned int FLAGS)
     TOKEN_URL: A PKCS '11' URL specifying a token

     OLDPIN: old user's PIN

     NEWPIN: new user's PIN

     FLAGS: one of 'gnutls_pkcs11_pin_flag_t' .

     This function will modify or set a user's PIN for the given token.
     If it is called to set a user pin for first time the oldpin must be
     NULL.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_pkcs11_type_get_name
---------------------------

 -- Function: const char * gnutls_pkcs11_type_get_name
          (gnutls_pkcs11_obj_type_t TYPE)
     TYPE: Holds the PKCS 11 object type, a 'gnutls_pkcs11_obj_type_t' .

     This function will return a human readable description of the
     PKCS11 object type 'obj' .  It will return "Unknown" for unknown
     types.

     *Returns:* human readable string labeling the PKCS11 object type
     'type' .

     *Since:* 2.12.0

gnutls_x509_crt_import_pkcs11
-----------------------------

 -- Function: int gnutls_x509_crt_import_pkcs11 (gnutls_x509_crt_t CRT,
          gnutls_pkcs11_obj_t PKCS11_CRT)
     CRT: A certificate of type 'gnutls_x509_crt_t'

     PKCS11_CRT: A PKCS 11 object that contains a certificate

     This function will import a PKCS 11 certificate to a
     'gnutls_x509_crt_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_x509_crt_import_pkcs11_url
---------------------------------

 -- Function: int gnutls_x509_crt_import_pkcs11_url (gnutls_x509_crt_t
          CRT, const char * URL, unsigned int FLAGS)
     CRT: A certificate of type 'gnutls_x509_crt_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will import a PKCS 11 certificate directly from a
     token without involving the 'gnutls_pkcs11_obj_t' structure.  This
     function will fail if the certificate stored is not of X.509 type.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_x509_crt_list_import_pkcs11
----------------------------------

 -- Function: int gnutls_x509_crt_list_import_pkcs11 (gnutls_x509_crt_t
          * CERTS, unsigned int CERT_MAX, gnutls_pkcs11_obj_t * const
          OBJS, unsigned int FLAGS)
     CERTS: A list of certificates of type 'gnutls_x509_crt_t'

     CERT_MAX: The maximum size of the list

     OBJS: A list of PKCS 11 objects

     FLAGS: 0 for now

     This function will import a PKCS 11 certificate list to a list of
     'gnutls_x509_crt_t' structure.  These must not be initialized.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0


File: gnutls.info,  Node: Abstract key API,  Next: Cryptographic API,  Prev: PKCS 11 API,  Up: API reference

D.8 Abstract key API
====================

The following functions are to be used for abstract key handling.  Their
prototypes lie in 'gnutls/abstract.h'.

gnutls_certificate_set_key
--------------------------

 -- Function: int gnutls_certificate_set_key
          (gnutls_certificate_credentials_t RES, const char** NAMES, int
          NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int PCERT_LIST_SIZE,
          gnutls_privkey_t KEY)
     RES: is a 'gnutls_certificate_credentials_t' structure.

     NAMES: is an array of DNS name of the certificate (NULL if none)

     NAMES_SIZE: holds the size of the names list

     PCERT_LIST: contains a certificate list (path) for the specified
     private key

     PCERT_LIST_SIZE: holds the size of the certificate list

     KEY: is a gnutls_x509_privkey_t key

     This function sets a certificate/private key pair in the
     gnutls_certificate_credentials_t structure.  This function may be
     called more than once, in case multiple keys/certificates exist for
     the server.  For clients that wants to send more than its own end
     entity certificate (e.g., also an intermediate CA cert) then put
     the certificate chain in 'pcert_list' .  The 'pcert_list' and 'key'
     will become part of the credentials structure and must not be
     deallocated.  They will be automatically deallocated when 'res' is
     deinitialized.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

     *Since:* 3.0

gnutls_certificate_set_retrieve_function2
-----------------------------------------

 -- Function: void gnutls_certificate_set_retrieve_function2
          (gnutls_certificate_credentials_t CRED,
          gnutls_certificate_retrieve_function2 * FUNC)
     CRED: is a 'gnutls_certificate_credentials_t' structure.

     FUNC: is the callback function

     This function sets a callback to be called in order to retrieve the
     certificate to be used in the handshake.

     The callback's function prototype is: int
     (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int
     nreqs, const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length,
     gnutls_pcert_st** pcert, unsigned int *pcert_length,
     gnutls_privkey_t * pkey);

     'req_ca_cert' is only used in X.509 certificates.  Contains a list
     with the CA names that the server considers trusted.  Normally we
     should send a certificate that is signed by one of these CAs.
     These names are DER encoded.  To get a more meaningful value use
     the function 'gnutls_x509_rdn_get()' .

     'pk_algos' contains a list with server's acceptable signature
     algorithms.  The certificate returned should support the server's
     given algorithms.

     'pcert' should contain a single certificate and public or a list of
     them.

     'pcert_length' is the size of the previous list.

     'pkey' is the private key.

     If the callback function is provided then gnutls will call it, in
     the handshake, after the certificate request message has been
     received.

     In server side pk_algos and req_ca_dn are NULL.

     The callback function should set the certificate list to be sent,
     and return 0 on success.  If no certificate was selected then the
     number of certificates should be set to zero.  The value (-1)
     indicates error and the handshake will be terminated.

     *Since:* 3.0

gnutls_pcert_deinit
-------------------

 -- Function: void gnutls_pcert_deinit (gnutls_pcert_st * PCERT)
     PCERT: The structure to be deinitialized

     This function will deinitialize a pcert structure.

     *Since:* 3.0

gnutls_pcert_import_openpgp
---------------------------

 -- Function: int gnutls_pcert_import_openpgp (gnutls_pcert_st* PCERT,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_openpgp_raw
-------------------------------

 -- Function: int gnutls_pcert_import_openpgp_raw (gnutls_pcert_st *
          PCERT, const gnutls_datum_t* CERT, gnutls_openpgp_crt_fmt_t
          FORMAT, gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     KEYID: The key ID to use (NULL for the master key)

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_x509
------------------------

 -- Function: int gnutls_pcert_import_x509 (gnutls_pcert_st* PCERT,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_x509_raw
----------------------------

 -- Function: int gnutls_pcert_import_x509_raw (gnutls_pcert_st * PCERT,
          const gnutls_datum_t* CERT, gnutls_x509_crt_fmt_t FORMAT,
          unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_list_import_x509_raw
---------------------------------

 -- Function: int gnutls_pcert_list_import_x509_raw (gnutls_pcert_st *
          PCERTS, unsigned int * PCERT_MAX, const gnutls_datum_t * DATA,
          gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
     PCERTS: The structures to store the parsed certificate.  Must not
     be initialized.

     PCERT_MAX: Initially must hold the maximum number of certs.  It
     will be updated with the number of certs available.

     DATA: The certificates.

     FORMAT: One of DER or PEM.

     FLAGS: must be (0) or an OR'd sequence of
     gnutls_certificate_import_flags.

     This function will convert the given PEM encoded certificate list
     to the native gnutls_x509_crt_t format.  The output will be stored
     in 'certs' .  They will be automatically initialized.

     If the Certificate is PEM encoded it should have a header of "X509
     CERTIFICATE", or "CERTIFICATE".

     *Returns:* the number of certificates read or a negative error
     value.

     *Since:* 3.0

gnutls_privkey_decrypt_data
---------------------------

 -- Function: int gnutls_privkey_decrypt_data (gnutls_privkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * CIPHERTEXT,
          gnutls_datum_t * PLAINTEXT)
     KEY: Holds the key

     FLAGS: zero for now

     CIPHERTEXT: holds the data to be decrypted

     PLAINTEXT: will contain the decrypted data, allocated with
     'gnutls_malloc()'

     This function will decrypt the given data using the algorithm
     supported by the private key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_deinit
---------------------

 -- Function: void gnutls_privkey_deinit (gnutls_privkey_t KEY)
     KEY: The structure to be deinitialized

     This function will deinitialize a private key structure.

     *Since:* 2.12.0

gnutls_privkey_get_pk_algorithm
-------------------------------

 -- Function: int gnutls_privkey_get_pk_algorithm (gnutls_privkey_t KEY,
          unsigned int * BITS)
     KEY: should contain a 'gnutls_privkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the public key algorithm of a private key
     and if possible will return a number of bits that indicates the
     security parameter of the key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_privkey_get_type
-----------------------

 -- Function: gnutls_privkey_type_t gnutls_privkey_get_type
          (gnutls_privkey_t KEY)
     KEY: should contain a 'gnutls_privkey_t' structure

     This function will return the type of the private key.  This is
     actually the type of the subsystem used to set this private key.

     *Returns:* a member of the 'gnutls_privkey_type_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_privkey_import_ext
-------------------------

 -- Function: int gnutls_privkey_import_ext (gnutls_privkey_t PKEY,
          gnutls_pk_algorithm_t PK, void* USERDATA,
          gnutls_privkey_sign_func SIGN_FUNC,
          gnutls_privkey_decrypt_func DECRYPT_FUNC, unsigned int FLAGS)
     PKEY: The private key

     PK: The public key algorithm

     USERDATA: private data to be provided to the callbacks

     SIGN_FUNC: callback for signature operations

     DECRYPT_FUNC: callback for decryption operations

     FLAGS: Flags for the import

     This function will associate the given callbacks with the
     'gnutls_privkey_t' structure.  At least one of the two callbacks
     must be non-null.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_privkey_import_openpgp
-----------------------------

 -- Function: int gnutls_privkey_import_openpgp (gnutls_privkey_t PKEY,
          gnutls_openpgp_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_openpgp_privkey_t' object must not be deallocated
     during the lifetime of this structure.  The subkey set as preferred
     will be used, or the master key otherwise.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_import_pkcs11
----------------------------

 -- Function: int gnutls_privkey_import_pkcs11 (gnutls_privkey_t PKEY,
          gnutls_pkcs11_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_pkcs11_privkey_t' object must not be deallocated during
     the lifetime of this structure.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_import_x509
--------------------------

 -- Function: int gnutls_privkey_import_x509 (gnutls_privkey_t PKEY,
          gnutls_x509_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_x509_privkey_t' object must not be deallocated during
     the lifetime of this structure.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_init
-------------------

 -- Function: int gnutls_privkey_init (gnutls_privkey_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an private key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_sign_data
------------------------

 -- Function: int gnutls_privkey_sign_data (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH, unsigned int FLAGS, const
          gnutls_datum_t * DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the key

     HASH: should be a digest algorithm

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature allocate with
     'gnutls_malloc()'

     This function will sign the given data using a signature algorithm
     supported by the private key.  Signature algorithms are always used
     together with a hash functions.  Different hash functions may be
     used for the RSA algorithm, but only the SHA family for the DSA
     keys.

     Use 'gnutls_pubkey_get_preferred_hash_algorithm()' to determine the
     hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_sign_hash
------------------------

 -- Function: int gnutls_privkey_sign_hash (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS, const
          gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the signer's key

     HASH_ALGO: The hash algorithm used

     FLAGS: zero for now

     HASH_DATA: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hashed data using a signature
     algorithm supported by the private key.  Signature algorithms are
     always used together with a hash functions.  Different hash
     functions may be used for the RSA algorithm, but only SHA-XXX for
     the DSA keys.

     Use 'gnutls_pubkey_get_preferred_hash_algorithm()' to determine the
     hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_deinit
--------------------

 -- Function: void gnutls_pubkey_deinit (gnutls_pubkey_t KEY)
     KEY: The structure to be deinitialized

     This function will deinitialize a public key structure.

     *Since:* 2.12.0

gnutls_pubkey_encrypt_data
--------------------------

 -- Function: int gnutls_pubkey_encrypt_data (gnutls_pubkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * PLAINTEXT,
          gnutls_datum_t * CIPHERTEXT)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     PLAINTEXT: The data to be encrypted

     CIPHERTEXT: contains the encrypted data

     This function will encrypt the given data, using the public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_export
--------------------

 -- Function: int gnutls_pubkey_export (gnutls_pubkey_t KEY,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the certificate

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the public key to DER or PEM format.  The
     contents of the exported data is the SubjectPublicKeyInfo X.509
     structure.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 2.12.0

gnutls_pubkey_get_key_id
------------------------

 -- Function: int gnutls_pubkey_get_key_id (gnutls_pubkey_t KEY,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will return a unique ID the depends on the public key
     parameters.  This ID can be used in checking whether a certificate
     corresponds to the given public key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 2.12.0

gnutls_pubkey_get_key_usage
---------------------------

 -- Function: int gnutls_pubkey_get_key_usage (gnutls_pubkey_t KEY,
          unsigned int * USAGE)
     KEY: should contain a 'gnutls_pubkey_t' structure

     USAGE: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the key usage of the public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_get_openpgp_key_id
--------------------------------

 -- Function: int gnutls_pubkey_get_openpgp_key_id (gnutls_pubkey_t KEY,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE, unsigned int * SUBKEY)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     SUBKEY: Will be non zero if the key ID corresponds to a subkey

     This function will return a unique ID the depends on the public key
     parameters.  This ID can be used in checking whether a certificate
     corresponds to the given public key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 3.0

gnutls_pubkey_get_pk_algorithm
------------------------------

 -- Function: int gnutls_pubkey_get_pk_algorithm (gnutls_pubkey_t KEY,
          unsigned int * BITS)
     KEY: should contain a 'gnutls_pubkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the public key algorithm of a public key
     and if possible will return a number of bits that indicates the
     security parameter of the key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_pubkey_get_pk_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_dsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y)
     KEY: Holds the public key

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     This function will export the DSA public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.12.0

gnutls_pubkey_get_pk_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t
          * Y)
     KEY: Holds the public key

     CURVE: will hold the curve

     X: will hold x

     Y: will hold y

     This function will export the ECC public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.0

gnutls_pubkey_get_pk_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_get_pk_ecc_x962 (gnutls_pubkey_t KEY,
          gnutls_datum_t* PARAMETERS, gnutls_datum_t * ECPOINT)
     KEY: Holds the public key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     This function will export the ECC public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.0

gnutls_pubkey_get_pk_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_get_pk_rsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * M, gnutls_datum_t * E)
     KEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 2.12.0

gnutls_pubkey_get_preferred_hash_algorithm
------------------------------------------

 -- Function: int gnutls_pubkey_get_preferred_hash_algorithm
          (gnutls_pubkey_t KEY, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     KEY: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non zero it means that the algorithm MUST use this hash.
     May be NULL.

     This function will read the certifcate and return the appropriate
     digest algorithm to use for signing with this certificate.  Some
     certificates (i.e.  DSA might not be able to sign without the
     preferred algorithm).

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.12.0

gnutls_pubkey_get_verify_algorithm
----------------------------------

 -- Function: int gnutls_pubkey_get_verify_algorithm (gnutls_pubkey_t
          KEY, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     KEY: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     This function will read the certifcate and the signed data to
     determine the hash algorithm used to generate the signature.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import
--------------------

 -- Function: int gnutls_pubkey_import (gnutls_pubkey_t KEY, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed public key.

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     This function will import the provided public key in a
     SubjectPublicKeyInfo X.509 structure to a native 'gnutls_pubkey_t'
     structure.  The output will be stored in 'key' .  If the public key
     is PEM encoded it should have a header of "PUBLIC KEY".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_dsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * G, const gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     P: holds the p

     Q: holds the q

     G: holds the g

     Y: holds the y

     This function will convert the given DSA raw parameters to the
     native 'gnutls_pubkey_t' format.  The output will be stored in
     'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_import_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t CURVE, const gnutls_datum_t * X, const
          gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     CURVE: holds the curve

     X: holds the x

     Y: holds the y

     This function will convert the given elliptic curve parameters to a
     'gnutls_pubkey_t' .  The output will be stored in 'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_import_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_import_ecc_x962 (gnutls_pubkey_t KEY,
          const gnutls_datum_t * PARAMETERS, const gnutls_datum_t *
          ECPOINT)
     KEY: The structure to store the parsed key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     This function will convert the given elliptic curve parameters to a
     'gnutls_pubkey_t' .  The output will be stored in 'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_import_openpgp
----------------------------

 -- Function: int gnutls_pubkey_import_openpgp (gnutls_pubkey_t KEY,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     Imports a public key from an openpgp key.  This function will
     import the given public key to the abstract 'gnutls_pubkey_t'
     structure.  The subkey set as preferred will be imported or the
     master key otherwise.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_pkcs11
---------------------------

 -- Function: int gnutls_pubkey_import_pkcs11 (gnutls_pubkey_t KEY,
          gnutls_pkcs11_obj_t OBJ, unsigned int FLAGS)
     KEY: The public key

     OBJ: The parameters to be imported

     FLAGS: should be zero

     Imports a public key from a pkcs11 key.  This function will import
     the given public key to the abstract 'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_pkcs11_url
-------------------------------

 -- Function: int gnutls_pubkey_import_pkcs11_url (gnutls_pubkey_t KEY,
          const char * URL, unsigned int FLAGS)
     KEY: A key of type 'gnutls_pubkey_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will import a PKCS 11 certificate to a
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_privkey
----------------------------

 -- Function: int gnutls_pubkey_import_privkey (gnutls_pubkey_t KEY,
          gnutls_privkey_t PKEY, unsigned int USAGE, unsigned int FLAGS)
     KEY: The public key

     PKEY: The private key

     USAGE: GNUTLS_KEY_* key usage flags.

     FLAGS: should be zero

     Imports the public key from a private.  This function will import
     the given public key to the abstract 'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_rsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * M, const gnutls_datum_t * E)
     KEY: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     This function will replace the parameters in the given structure.
     The new parameters should be stored in the appropriate
     gnutls_datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

     *Since:* 2.12.0

gnutls_pubkey_import_x509
-------------------------

 -- Function: int gnutls_pubkey_import_x509 (gnutls_pubkey_t KEY,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     This function will import the given public key to the abstract
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_init
------------------

 -- Function: int gnutls_pubkey_init (gnutls_pubkey_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an public key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_set_key_usage
---------------------------

 -- Function: int gnutls_pubkey_set_key_usage (gnutls_pubkey_t KEY,
          unsigned int USAGE)
     KEY: a certificate of type 'gnutls_x509_crt_t'

     USAGE: an ORed sequence of the GNUTLS_KEY_* elements.

     This function will set the key usage flags of the public key.  This
     is only useful if the key is to be exported to a certificate or
     certificate request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_verify_data
-------------------------

 -- Function: int gnutls_pubkey_verify_data (gnutls_pubkey_t PUBKEY,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     FLAGS: should be 0 for now

     DATA: holds the signed data

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value ('GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     *Since:* 2.12.0

gnutls_pubkey_verify_data2
--------------------------

 -- Function: int gnutls_pubkey_verify_data2 (gnutls_pubkey_t PUBKEY,
          gnutls_sign_algorithm_t ALGO, unsigned int FLAGS, const
          gnutls_datum_t * DATA, const gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     ALGO: The signature algorithm used

     FLAGS: should be 0 for now

     DATA: holds the signed data

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value ('GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     *Since:* 3.0

gnutls_pubkey_verify_hash
-------------------------

 -- Function: int gnutls_pubkey_verify_hash (gnutls_pubkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value ('GNUTLS_E_PK_SIG_VERIFY_FAILED'
     in verification failure).

     *Since:* 2.12.0

gnutls_x509_crl_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crl_privkey_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
     unless you know what you're doing.

     FLAGS: must be 0

     This function will sign the CRL with the issuer's private key, and
     will copy the issuer's information into the CRL.

     This must be the last step in a certificate CRL since all the
     previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     Since 2.12.0

gnutls_x509_crq_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crq_privkey_sign (gnutls_x509_crq_t CRQ,
          gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned
          int FLAGS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'

     FLAGS: must be 0

     This function will sign the certificate request with a private key.
     This must be the same key as the one used in
     'gnutls_x509_crt_set_key()' since a certificate request is self
     signed.

     This must be the last step in a certificate request generation
     since all the previously set parameters are now signed.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.  'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
     didn't set all information in the certificate request (e.g., the
     version using 'gnutls_x509_crq_set_version()' ).

     *Since:* 2.12.0

gnutls_x509_crq_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crq_set_pubkey (gnutls_x509_crq_t CRQ,
          gnutls_pubkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a public key

     This function will set the public parameters from the given public
     key to the request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_x509_crt_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crt_privkey_sign (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice

     FLAGS: must be 0

     This function will sign the certificate with the issuer's private
     key, and will copy the issuer's information into the certificate.

     This must be the last step in a certificate generation since all
     the previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_x509_crt_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crt_set_pubkey (gnutls_x509_crt_t CRT,
          gnutls_pubkey_t KEY)
     CRT: should contain a 'gnutls_x509_crt_t' structure

     KEY: holds a public key

     This function will set the public parameters from the given public
     key to the request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0


File: gnutls.info,  Node: Cryptographic API,  Next: Compatibility API,  Prev: Abstract key API,  Up: API reference

D.9 Cryptographic API
=====================

The following functions are to be used for low-level cryptographic
operations.  Their prototypes lie in 'gnutls/crypto.h'.

gnutls_cipher_add_auth
----------------------

 -- Function: int gnutls_cipher_add_auth (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXT_SIZE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to be authenticated

     TEXT_SIZE: The length of the data

     This function operates on authenticated encryption with associated
     data (AEAD) ciphers and authenticate the input data.  This function
     can only be called once and before any encryption operations.

     *Returns:* Zero or a negative error code on error.

     *Since:* 3.0

gnutls_cipher_decrypt
---------------------

 -- Function: int gnutls_cipher_decrypt (gnutls_cipher_hd_t HANDLE, void
          * CIPHERTEXT, size_t CIPHERTEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     This function will decrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_decrypt2
----------------------

 -- Function: int gnutls_cipher_decrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT,
          size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     TEXT: the decrypted data

     TEXTLEN: The available length for decrypted data

     This function will decrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.12.0

gnutls_cipher_deinit
--------------------

 -- Function: void gnutls_cipher_deinit (gnutls_cipher_hd_t HANDLE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     This function will deinitialize all resources occupied by the given
     encryption context.

     *Since:* 2.10.0

gnutls_cipher_encrypt
---------------------

 -- Function: int gnutls_cipher_encrypt (gnutls_cipher_hd_t HANDLE, void
          * TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     This function will encrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_encrypt2
----------------------

 -- Function: int gnutls_cipher_encrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t
          CIPHERTEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     CIPHERTEXT: the encrypted data

     CIPHERTEXTLEN: The available length for encrypted data

     This function will encrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.12.0

gnutls_cipher_get_block_size
----------------------------

 -- Function: int gnutls_cipher_get_block_size
          (gnutls_cipher_algorithm_t ALGORITHM)
     ALGORITHM: is an encryption algorithm

     Get block size for encryption algorithm.

     *Returns:* block size for encryption algorithm.

     *Since:* 2.10.0

gnutls_cipher_init
------------------

 -- Function: int gnutls_cipher_init (gnutls_cipher_hd_t * HANDLE,
          gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY,
          const gnutls_datum_t * IV)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHER: the encryption algorithm to use

     KEY: The key to be used for encryption

     IV: The IV to use (if not applicable set NULL)

     This function will initialize an context that can be used for
     encryption/decryption of data.  This will effectively use the
     current crypto backend in use by gnutls or the cryptographic
     accelerator in use.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_set_iv
--------------------

 -- Function: void gnutls_cipher_set_iv (gnutls_cipher_hd_t HANDLE, void
          * IV, size_t IVLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     IV: the IV to set

     IVLEN: The length of the IV

     This function will set the IV to be used for the next encryption
     block.

     *Since:* 3.0

gnutls_cipher_tag
-----------------

 -- Function: int gnutls_cipher_tag (gnutls_cipher_hd_t HANDLE, void *
          TAG, size_t TAG_SIZE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TAG: will hold the tag

     TAG_SIZE: The length of the tag to return

     This function operates on authenticated encryption with associated
     data (AEAD) ciphers and will return the output tag.

     *Returns:* Zero or a negative error code on error.

     *Since:* 3.0

gnutls_hash
-----------

 -- Function: int gnutls_hash (gnutls_hash_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     This function will hash the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_deinit
------------------

 -- Function: void gnutls_hash_deinit (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     This function will deinitialize all resources occupied by the given
     hash context.

     *Since:* 2.10.0

gnutls_hash_fast
----------------

 -- Function: int gnutls_hash_fast (gnutls_digest_algorithm_t ALGORITHM,
          const void * TEXT, size_t TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     This convenience function will hash the given data and return
     output on a single call.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_get_len
-------------------

 -- Function: int gnutls_hash_get_len (gnutls_digest_algorithm_t
          ALGORITHM)
     ALGORITHM: the hash algorithm to use

     This function will return the length of the output data of the
     given hash algorithm.

     *Returns:* The length or zero on error.

     *Since:* 2.10.0

gnutls_hash_init
----------------

 -- Function: int gnutls_hash_init (gnutls_hash_hd_t * DIG,
          gnutls_digest_algorithm_t ALGORITHM)
     DIG: is a 'gnutls_hash_hd_t' structure.

     ALGORITHM: the hash algorithm to use

     This function will initialize an context that can be used to
     produce a Message Digest of data.  This will effectively use the
     current crypto backend in use by gnutls or the cryptographic
     accelerator in use.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_output
------------------

 -- Function: void gnutls_hash_output (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     This function will output the current hash value.

     *Since:* 2.10.0

gnutls_hmac
-----------

 -- Function: int gnutls_hmac (gnutls_hmac_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     This function will hash the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_deinit
------------------

 -- Function: void gnutls_hmac_deinit (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     This function will deinitialize all resources occupied by the given
     hmac context.

     *Since:* 2.10.0

gnutls_hmac_fast
----------------

 -- Function: int gnutls_hmac_fast (gnutls_mac_algorithm_t ALGORITHM,
          const void * KEY, size_t KEYLEN, const void * TEXT, size_t
          TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     KEY: the key to use

     KEYLEN: The length of the key

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     This convenience function will hash the given data and return
     output on a single call.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_get_len
-------------------

 -- Function: int gnutls_hmac_get_len (gnutls_mac_algorithm_t ALGORITHM)
     ALGORITHM: the hmac algorithm to use

     This function will return the length of the output data of the
     given hmac algorithm.

     *Returns:* The length or zero on error.

     *Since:* 2.10.0

gnutls_hmac_init
----------------

 -- Function: int gnutls_hmac_init (gnutls_hmac_hd_t * DIG,
          gnutls_digest_algorithm_t ALGORITHM, const void * KEY, size_t
          KEYLEN)
     DIG: is a 'gnutls_hmac_hd_t' structure.

     ALGORITHM: the HMAC algorithm to use

     KEY: The key to be used for encryption

     KEYLEN: The length of the key

     This function will initialize an context that can be used to
     produce a Message Authentication Code (MAC) of data.  This will
     effectively use the current crypto backend in use by gnutls or the
     cryptographic accelerator in use.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_output
------------------

 -- Function: void gnutls_hmac_output (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     This function will output the current MAC value.

     *Since:* 2.10.0

gnutls_rnd
----------

 -- Function: int gnutls_rnd (gnutls_rnd_level_t LEVEL, void * DATA,
          size_t LEN)
     LEVEL: a security level

     DATA: place to store random bytes

     LEN: The requested size

     This function will generate random data and store it to output
     buffer.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.12.0


File: gnutls.info,  Node: Compatibility API,  Prev: Cryptographic API,  Up: API reference

D.10 Compatibility API
======================

The following functions are carried over from old GnuTLS released.  They
might be removed at a later version.  Their prototypes lie in
'gnutls/compat.h'.

gnutls_certificate_set_rsa_export_params
----------------------------------------

 -- Function: void gnutls_certificate_set_rsa_export_params
          (gnutls_certificate_credentials_t RES, gnutls_rsa_params_t
          RSA_PARAMS)
     RES: is a gnutls_certificate_credentials_t structure

     RSA_PARAMS: is a structure that holds temporary RSA parameters.

     This function will set the temporary RSA parameters for a
     certificate server to use.  These parameters will be used in
     RSA-EXPORT cipher suites.

gnutls_certificate_type_set_priority
------------------------------------

 -- Function: int gnutls_certificate_type_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_certificate_type_t elements.

     Sets the priority on the certificate types supported by gnutls.
     Priority is higher for elements specified before others.  After
     specifying the types you want, you must append a 0.  Note that the
     certificate type priority is set on the client.  The server does
     not use the cert type priority except for disabling types that were
     not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_cipher_set_priority
--------------------------

 -- Function: int gnutls_cipher_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_cipher_algorithm_t elements.

     Sets the priority on the ciphers supported by gnutls.  Priority is
     higher for elements specified before others.  After specifying the
     ciphers you want, you must append a 0.  Note that the priority is
     set on the client.  The server does not use the algorithm's
     priority except for disabling algorithms that were not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

gnutls_compression_set_priority
-------------------------------

 -- Function: int gnutls_compression_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_compression_method_t
     elements.

     Sets the priority on the compression algorithms supported by
     gnutls.  Priority is higher for elements specified before others.
     After specifying the algorithms you want, you must append a 0.
     Note that the priority is set on the client.  The server does not
     use the algorithm's priority except for disabling algorithms that
     were not specified.

     TLS 1.0 does not define any compression algorithms except NULL.
     Other compression algorithms are to be considered as gnutls
     extensions.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_kx_set_priority
----------------------

 -- Function: int gnutls_kx_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_kx_algorithm_t elements.

     Sets the priority on the key exchange algorithms supported by
     gnutls.  Priority is higher for elements specified before others.
     After specifying the algorithms you want, you must append a 0.
     Note that the priority is set on the client.  The server does not
     use the algorithm's priority except for disabling algorithms that
     were not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_mac_set_priority
-----------------------

 -- Function: int gnutls_mac_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_mac_algorithm_t elements.

     Sets the priority on the mac algorithms supported by gnutls.
     Priority is higher for elements specified before others.  After
     specifying the algorithms you want, you must append a 0.  Note that
     the priority is set on the client.  The server does not use the
     algorithm's priority except for disabling algorithms that were not
     specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_sign_hash
--------------------------------

 -- Function: int gnutls_openpgp_privkey_sign_hash
          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * HASH,
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hash using the private key.  You
     should use 'gnutls_openpgp_privkey_set_preferred_key_id()' before
     calling this function to set the subkey to use.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_privkey_sign_hash()' instead.

gnutls_protocol_set_priority
----------------------------

 -- Function: int gnutls_protocol_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_protocol_t elements.

     Sets the priority on the protocol versions supported by gnutls.
     This function actually enables or disables protocols.  Newer
     protocol versions always have highest priority.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_rsa_export_get_modulus_bits
----------------------------------

 -- Function: int gnutls_rsa_export_get_modulus_bits (gnutls_session_t
          SESSION)
     SESSION: is a gnutls session

     Get the export RSA parameter's modulus size.

     *Returns:* The bits used in the last RSA-EXPORT key exchange with
     the peer, or a negative error code in case of error.

gnutls_rsa_export_get_pubkey
----------------------------

 -- Function: int gnutls_rsa_export_get_pubkey (gnutls_session_t
          SESSION, gnutls_datum_t * EXPONENT, gnutls_datum_t * MODULUS)
     SESSION: is a gnutls session

     EXPONENT: will hold the exponent.

     MODULUS: will hold the modulus.

     This function will return the peer's public key exponent and
     modulus used in the last RSA-EXPORT authentication.  The output
     parameters must be freed with 'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise an error code is returned.

gnutls_rsa_params_cpy
---------------------

 -- Function: int gnutls_rsa_params_cpy (gnutls_rsa_params_t DST,
          gnutls_rsa_params_t SRC)
     DST: Is the destination structure, which should be initialized.

     SRC: Is the source structure

     This function will copy the RSA parameters structure from source to
     destination.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_deinit
------------------------

 -- Function: void gnutls_rsa_params_deinit (gnutls_rsa_params_t
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that holds the parameters

     This function will deinitialize the RSA parameters structure.

gnutls_rsa_params_export_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_export_pkcs1 (gnutls_rsa_params_t
          PARAMS, gnutls_x509_crt_fmt_t FORMAT, unsigned char *
          PARAMS_DATA, size_t * PARAMS_DATA_SIZE)
     PARAMS: Holds the RSA parameters

     FORMAT: the format of output params.  One of PEM or DER.

     PARAMS_DATA: will contain a PKCS1 RSAPublicKey structure PEM or DER
     encoded

     PARAMS_DATA_SIZE: holds the size of params_data (and will be
     replaced by the actual size of parameters)

     This function will export the given RSA parameters to a PKCS1
     RSAPublicKey structure.  If the buffer provided is not long enough
     to hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be
     returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     RSA PRIVATE KEY".

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_export_raw
----------------------------

 -- Function: int gnutls_rsa_params_export_raw (gnutls_rsa_params_t RSA,
          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U,
          unsigned int * BITS)
     RSA: a structure that holds the rsa parameters

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     BITS: if non null will hold the prime's number of bits

     This function will export the RSA parameters found in the given
     structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_generate2
---------------------------

 -- Function: int gnutls_rsa_params_generate2 (gnutls_rsa_params_t
          PARAMS, unsigned int BITS)
     PARAMS: The structure where the parameters will be stored

     BITS: is the prime's number of bits

     This function will generate new temporary RSA parameters for use in
     RSA-EXPORT ciphersuites.  This function is normally slow.

     Note that if the parameters are to be used in export cipher suites
     the bits value should be 512 or less.  Also note that the
     generation of new RSA parameters is only useful to servers.
     Clients use the parameters sent by the server, thus it's no use
     calling this in client side.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_import_pkcs1 (gnutls_rsa_params_t
          PARAMS, const gnutls_datum_t * PKCS1_PARAMS,
          gnutls_x509_crt_fmt_t FORMAT)
     PARAMS: A structure where the parameters will be copied to

     PKCS1_PARAMS: should contain a PKCS1 RSAPublicKey structure PEM or
     DER encoded

     FORMAT: the format of params.  PEM or DER.

     This function will extract the RSAPublicKey found in a PKCS1
     formatted structure.

     If the structure is PEM encoded, it should have a header of "BEGIN
     RSA PRIVATE KEY".

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_raw
----------------------------

 -- Function: int gnutls_rsa_params_import_raw (gnutls_rsa_params_t
          RSA_PARAMS, const gnutls_datum_t * M, const gnutls_datum_t *
          E, const gnutls_datum_t * D, const gnutls_datum_t * P, const
          gnutls_datum_t * Q, const gnutls_datum_t * U)
     RSA_PARAMS: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient

     This function will replace the parameters in the given structure.
     The new parameters should be stored in the appropriate
     gnutls_datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_init
----------------------

 -- Function: int gnutls_rsa_params_init (gnutls_rsa_params_t *
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that will hold the parameters

     This function will initialize the temporary RSA parameters
     structure.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_set_default_export_priority
----------------------------------

 -- Function: int gnutls_set_default_export_priority (gnutls_session_t
          SESSION)
     SESSION: is a 'gnutls_session_t' structure.

     Sets some default priority on the ciphers, key exchange methods,
     macs and compression methods.  This function also includes weak
     algorithms.

     This is the same as calling:

     gnutls_priority_set_direct (session, "EXPORT", NULL);

     This function is kept around for backwards compatibility, but
     because of its wide use it is still fully supported.  If you wish
     to allow users to provide a string that specify which ciphers to
     use (which is recommended), you should use
     'gnutls_priority_set_direct()' or 'gnutls_priority_set()' instead.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_sign_callback_get
------------------------

 -- Function: gnutls_sign_func gnutls_sign_callback_get
          (gnutls_session_t SESSION, void ** USERDATA)
     SESSION: is a gnutls session

     USERDATA: if non-'NULL' , will be set to abstract callback pointer.

     Retrieve the callback function, and its userdata pointer.

     *Returns:* The function pointer set by 'gnutls_sign_callback_set()'
     , or if not set, 'NULL' .

     *Deprecated:* Use the PKCS 11 interfaces instead.

gnutls_sign_callback_set
------------------------

 -- Function: void gnutls_sign_callback_set (gnutls_session_t SESSION,
          gnutls_sign_func SIGN_FUNC, void * USERDATA)
     SESSION: is a gnutls session

     SIGN_FUNC: function pointer to application's sign callback.

     USERDATA: void pointer that will be passed to sign callback.

     Set the callback function.  The function must have this prototype:

     typedef int (*gnutls_sign_func) (gnutls_session_t session, void
     *userdata, gnutls_certificate_type_t cert_type, const
     gnutls_datum_t * cert, const gnutls_datum_t * hash, gnutls_datum_t
     * signature);

     The 'userdata' parameter is passed to the 'sign_func' verbatim, and
     can be used to store application-specific data needed in the
     callback function.  See also 'gnutls_sign_callback_get()' .

     *Deprecated:* Use the PKCS 11 or 'gnutls_privkey_t' interfacess
     like 'gnutls_privkey_import_ext()' instead.

gnutls_x509_crl_sign
--------------------

 -- Function: int gnutls_x509_crl_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     This function is the same a 'gnutls_x509_crl_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_x509_crl_privkey_sign()' .

gnutls_x509_crq_sign
--------------------

 -- Function: int gnutls_x509_crq_sign (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     This function is the same a 'gnutls_x509_crq_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_x509_crq_privkey_sign()' instead.

gnutls_x509_crt_get_preferred_hash_algorithm
--------------------------------------------

 -- Function: int gnutls_x509_crt_get_preferred_hash_algorithm
          (gnutls_x509_crt_t CRT, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     CRT: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non (0) it means that the algorithm MUST use this hash.
     May be NULL.

     This function will read the certifcate and return the appropriate
     digest algorithm to use for signing with this certificate.  Some
     certificates (i.e.  DSA might not be able to sign without the
     preferred algorithm).

     *Deprecated:* Please use
     'gnutls_pubkey_get_preferred_hash_algorithm()' .

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.12.0

gnutls_x509_crt_get_verify_algorithm
------------------------------------

 -- Function: int gnutls_x509_crt_get_verify_algorithm
          (gnutls_x509_crt_t CRT, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     CRT: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     This function will read the certifcate and the signed data to
     determine the hash algorithm used to generate the signature.

     *Deprecated:* Use 'gnutls_pubkey_get_verify_algorithm()' instead.

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.8.0

gnutls_x509_crt_verify_data
---------------------------

 -- Function: int gnutls_x509_crt_verify_data (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     Deprecated.  Please use 'gnutls_pubkey_verify_data()' .

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code on
     success.

gnutls_x509_crt_verify_hash
---------------------------

 -- Function: int gnutls_x509_crt_verify_hash (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the certificate.

     Deprecated.  Please use 'gnutls_pubkey_verify_data()' .

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and a positive code on
     success.

gnutls_x509_privkey_sign_data
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_data (gnutls_x509_privkey_t
          KEY, gnutls_digest_algorithm_t DIGEST, unsigned int FLAGS,
          const gnutls_datum_t * DATA, void * SIGNATURE, size_t *
          SIGNATURE_SIZE)
     KEY: Holds the key

     DIGEST: should be MD5 or SHA1

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature

     SIGNATURE_SIZE: holds the size of signature (and will be replaced
     by the new size)

     This function will sign the given data using a signature algorithm
     supported by the private key.  Signature algorithms are always used
     together with a hash functions.  Different hash functions may be
     used for the RSA algorithm, but only SHA-1 for the DSA keys.

     If the buffer provided is not long enough to hold the output, then
     * 'signature_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     Use 'gnutls_x509_crt_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_privkey_sign_data()' .

gnutls_x509_privkey_sign_hash
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_hash (gnutls_x509_privkey_t
          KEY, const gnutls_datum_t * HASH, gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hash using the private key.  Do
     not use this function directly unless you know what it is.  Typical
     signing requires the data to be hashed and stored in special
     formats (e.g.  BER Digest-Info for RSA).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     Deprecated in: 2.12.0


File: gnutls.info,  Node: Copying Information,  Next: Bibliography,  Prev: API reference,  Up: Top

Appendix E Copying Information
******************************

GNU Free Documentation License
==============================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     'http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     'http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.

